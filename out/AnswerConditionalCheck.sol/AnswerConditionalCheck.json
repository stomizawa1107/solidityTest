{
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SAnswerConditionalCheck.Person",
          "name": "person",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrowMore",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b506102f1806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806332c3095f14610030575b600080fd5b61004361003e3660046101dd565b610057565b604051901515815260200160405180910390f35b600082336001600160a01b031681600001516001600160a01b03160361017f57600084604001516000036100ed575060405162461bcd60e51b815260206004820152602e60248201527f436f6c6c61746572616c697a6174696f6e20726174696f206d7573742062652060448201526d6d6f7265207468616e203131302560901b60648201526001906084015b60405180910390fd5b606e8560400151866020015186610104919061026e565b61010e9190610299565b111561011c57506001610178565b60405162461bcd60e51b815260206004820152602b60248201527f436f6c6c61746572616c697a6174696f6e20726174696f20697320616c72656160448201526a0c8f240e8dede40d0d2ced60ab1b60648201526084016100e4565b91506101d6565b60405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468697320616360448201526531b7bab73a1760d11b60648201526084016100e4565b5092915050565b60008082840360808112156101f157600080fd5b60608112156101ff57600080fd5b506040516060810181811067ffffffffffffffff8211171561023157634e487b7160e01b600052604160045260246000fd5b60405283356001600160a01b038116811461024b57600080fd5b815260208481013590820152604080850135908201529460609093013593505050565b808202811582820484141761029357634e487b7160e01b600052601160045260246000fd5b92915050565b6000826102b657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220224f716856f9dd9ee931ea27dd1d886428a3b88f3324f28a5a4c71aeaf56cb6864736f6c63430008130033",
    "sourceMap": "237:1075:3:-:0;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806332c3095f14610030575b600080fd5b61004361003e3660046101dd565b610057565b604051901515815260200160405180910390f35b600082336001600160a01b031681600001516001600160a01b03160361017f57600084604001516000036100ed575060405162461bcd60e51b815260206004820152602e60248201527f436f6c6c61746572616c697a6174696f6e20726174696f206d7573742062652060448201526d6d6f7265207468616e203131302560901b60648201526001906084015b60405180910390fd5b606e8560400151866020015186610104919061026e565b61010e9190610299565b111561011c57506001610178565b60405162461bcd60e51b815260206004820152602b60248201527f436f6c6c61746572616c697a6174696f6e20726174696f20697320616c72656160448201526a0c8f240e8dede40d0d2ced60ab1b60648201526084016100e4565b91506101d6565b60405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468697320616360448201526531b7bab73a1760d11b60648201526084016100e4565b5092915050565b60008082840360808112156101f157600080fd5b60608112156101ff57600080fd5b506040516060810181811067ffffffffffffffff8211171561023157634e487b7160e01b600052604160045260246000fd5b60405283356001600160a01b038116811461024b57600080fd5b815260208481013590820152604080850135908201529460609093013593505050565b808202811582820484141761029357634e487b7160e01b600052601160045260246000fd5b92915050565b6000826102b657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220224f716856f9dd9ee931ea27dd1d886428a3b88f3324f28a5a4c71aeaf56cb6864736f6c63430008130033",
    "sourceMap": "237:1075:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;456:599;;;;;;:::i;:::-;;:::i;:::-;;;1091:14:66;;1084:22;1066:41;;1054:2;1039:18;456:599:3;;;;;;;;565:4;548:6;1154:10;-1:-1:-1;;;;;1139:25:3;:6;:11;;;-1:-1:-1;;;;;1139:25:3;;1136:159;;654:10:::1;684:6;:11;;;699:1;684:16:::0;681:347:::1;;-1:-1:-1::0;749:56:3::1;::::0;-1:-1:-1;;;749:56:3;;1320:2:66;749:56:3::1;::::0;::::1;1302:21:66::0;1359:2;1339:18;;;1332:30;1398:34;1378:18;;;1371:62;-1:-1:-1;;;1449:18:66;;;1442:44;731:4:3::1;::::0;1503:19:66;;749:56:3::1;;;;;;;;681:347;876:3;861:6;:11;;;841:6;:17;;;832:6;:26;;;;:::i;:::-;:40;;;;:::i;:::-;831:48;828:200;;;-1:-1:-1::0;914:4:3::1;828:200;;;964:53;::::0;-1:-1:-1;;;964:53:3;;2227:2:66;964:53:3::1;::::0;::::1;2209:21:66::0;2266:2;2246:18;;;2239:30;2305:34;2285:18;;;2278:62;-1:-1:-1;;;2356:18:66;;;2349:41;2407:19;;964:53:3::1;2025:407:66::0;828:200:3::1;1043:5:::0;-1:-1:-1;1136:159:3;;;1236:48;;-1:-1:-1;;;1236:48:3;;2639:2:66;1236:48:3;;;2621:21:66;2678:2;2658:18;;;2651:30;2717:34;2697:18;;;2690:62;-1:-1:-1;;;2768:18:66;;;2761:36;2814:19;;1236:48:3;2437:402:66;1136:159:3;456:599;;;;;:::o;14:907:66:-;105:6;113;157:9;148:7;144:23;187:3;183:2;179:12;176:32;;;204:1;201;194:12;176:32;228:4;224:2;220:13;217:33;;;246:1;243;236:12;217:33;;279:2;273:9;321:4;313:6;309:17;392:6;380:10;377:22;356:18;344:10;341:34;338:62;335:185;;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;335:185;536:2;529:22;573:23;;-1:-1:-1;;;;;625:31:66;;615:42;;605:70;;671:1;668;661:12;605:70;684:21;;766:2;751:18;;;738:32;721:15;;;714:57;832:2;817:18;;;804:32;787:15;;;780:57;691:6;909:4;894:20;;;881:34;;-1:-1:-1;;;14:907:66:o;1533:265::-;1606:9;;;1637;;1654:15;;;1648:22;;1634:37;1624:168;;1714:10;1709:3;1705:20;1702:1;1695:31;1749:4;1746:1;1739:15;1777:4;1774:1;1767:15;1624:168;1533:265;;;;:::o;1803:217::-;1843:1;1869;1859:132;;1913:10;1908:3;1904:20;1901:1;1894:31;1948:4;1945:1;1938:15;1976:4;1973:1;1966:15;1859:132;-1:-1:-1;2005:9:66;;1803:217::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "borrowMore((address,uint256,uint256),uint256)": "32c3095f"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"internalType\":\"struct SAnswerConditionalCheck.Person\",\"name\":\"person\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrowMore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrowMore((address,uint256,uint256),uint256)\":{\"notice\":\"A-3. \\u5236\\u5fa1\\u69cb\\u6587(if, for, require, revert), modifier, \\u30a2\\u30af\\u30bb\\u30b9\\u5236\\u5fa1, \\u30aa\\u30fc\\u30ca\\u30fc\\u6a29\\u9650\\u3092\\u8a66\\u3059\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/A3/AnswerConditionalCheck.sol\":\"AnswerConditionalCheck\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=util/lib/openzeppelin-contracts/\",\":ds-test/=util/lib/forge-std/lib/ds-test/src/\",\":forge-std/=util/lib/forge-std/src/\",\":openzeppelin-contracts/=util/lib/openzeppelin-contracts/\",\":scal-std/=util/lib/scal-std/src/\",\":src/=contracts/src/\",\":test/=test/\"]},\"sources\":{\"contracts/src/A3/AnswerConditionalCheck.sol\":{\"keccak256\":\"0xee73934cdfca3ad3eb6112c47ea573af9d0ecb4a05b92576df9b4bcca1177dac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4c7fc3427375414bcad57444117c5c3cd48b5f19fe882c3f5d28c37f57aaaca\",\"dweb:/ipfs/QmW4FyDhuiHGBZvZVozT6dkFwkE8pNxEa8LFshY3A7KX3c\"]},\"contracts/src/A3/interfaces/IAnswerConditionalCheck.sol\":{\"keccak256\":\"0xd5b02bde38cda3f7e16f9cf2990a8ce874fedb2fba5c805a067025114f674a6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://32a5d4e047276d8aa63f3f3cbedeb99df460b8c79f1b436ebde550247c251d47\",\"dweb:/ipfs/QmPbY3SutfKE5Z1B64ajuj2ws7qk29uw6pvXhuMy8wLoRK\"]},\"contracts/src/A3/interfaces/SAnswerConditionalCheck.sol\":{\"keccak256\":\"0xc5a0f51cf3300637c5511d50e4cac3414bfe00d6b5b7c3d2ff2d537e4f95413e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b10607d05c5b5555be121b8b5a7df2a9d96011516a510e2dbb04fd7c9e74a76b\",\"dweb:/ipfs/QmVz1o7uf9TbN7Hw1BnFPCeKJZwBCBGoqQkeStoQbXssYY\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "struct SAnswerConditionalCheck.Person",
              "name": "person",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "debt",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "borrowMore",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "borrowMore((address,uint256,uint256),uint256)": {
            "notice": "A-3. 制御構文(if, for, require, revert), modifier, アクセス制御, オーナー権限を試す"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=util/lib/openzeppelin-contracts/",
        ":ds-test/=util/lib/forge-std/lib/ds-test/src/",
        ":forge-std/=util/lib/forge-std/src/",
        ":openzeppelin-contracts/=util/lib/openzeppelin-contracts/",
        ":scal-std/=util/lib/scal-std/src/",
        ":src/=contracts/src/",
        ":test/=test/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/src/A3/AnswerConditionalCheck.sol": "AnswerConditionalCheck"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/src/A3/AnswerConditionalCheck.sol": {
        "keccak256": "0xee73934cdfca3ad3eb6112c47ea573af9d0ecb4a05b92576df9b4bcca1177dac",
        "urls": [
          "bzz-raw://f4c7fc3427375414bcad57444117c5c3cd48b5f19fe882c3f5d28c37f57aaaca",
          "dweb:/ipfs/QmW4FyDhuiHGBZvZVozT6dkFwkE8pNxEa8LFshY3A7KX3c"
        ],
        "license": "MIT"
      },
      "contracts/src/A3/interfaces/IAnswerConditionalCheck.sol": {
        "keccak256": "0xd5b02bde38cda3f7e16f9cf2990a8ce874fedb2fba5c805a067025114f674a6c",
        "urls": [
          "bzz-raw://32a5d4e047276d8aa63f3f3cbedeb99df460b8c79f1b436ebde550247c251d47",
          "dweb:/ipfs/QmPbY3SutfKE5Z1B64ajuj2ws7qk29uw6pvXhuMy8wLoRK"
        ],
        "license": "MIT"
      },
      "contracts/src/A3/interfaces/SAnswerConditionalCheck.sol": {
        "keccak256": "0xc5a0f51cf3300637c5511d50e4cac3414bfe00d6b5b7c3d2ff2d537e4f95413e",
        "urls": [
          "bzz-raw://b10607d05c5b5555be121b8b5a7df2a9d96011516a510e2dbb04fd7c9e74a76b",
          "dweb:/ipfs/QmVz1o7uf9TbN7Hw1BnFPCeKJZwBCBGoqQkeStoQbXssYY"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/src/A3/AnswerConditionalCheck.sol",
    "id": 251,
    "exportedSymbols": {
      "AnswerConditionalCheck": [
        250
      ],
      "IAnswerConditionalCheck": [
        265
      ],
      "SAnswerConditionalCheck": [
        275
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:1281:3",
    "nodes": [
      {
        "id": 165,
        "nodeType": "PragmaDirective",
        "src": "32:24:3",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".17"
        ]
      },
      {
        "id": 167,
        "nodeType": "ImportDirective",
        "src": "58:88:3",
        "nodes": [],
        "absolutePath": "contracts/src/A3/interfaces/IAnswerConditionalCheck.sol",
        "file": "src/A3/interfaces/IAnswerConditionalCheck.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 251,
        "sourceUnit": 266,
        "symbolAliases": [
          {
            "foreign": {
              "id": 166,
              "name": "IAnswerConditionalCheck",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 265,
              "src": "67:23:3",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 169,
        "nodeType": "ImportDirective",
        "src": "147:88:3",
        "nodes": [],
        "absolutePath": "contracts/src/A3/interfaces/SAnswerConditionalCheck.sol",
        "file": "src/A3/interfaces/SAnswerConditionalCheck.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 251,
        "sourceUnit": 276,
        "symbolAliases": [
          {
            "foreign": {
              "id": 168,
              "name": "SAnswerConditionalCheck",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 275,
              "src": "156:23:3",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 250,
        "nodeType": "ContractDefinition",
        "src": "237:1075:3",
        "nodes": [
          {
            "id": 230,
            "nodeType": "FunctionDefinition",
            "src": "456:599:3",
            "nodes": [],
            "body": {
              "id": 229,
              "nodeType": "Block",
              "src": "575:480:3",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    189
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 189,
                      "mutability": "mutable",
                      "name": "retOk",
                      "nameLocation": "659:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 229,
                      "src": "654:10:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 188,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "654:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 191,
                  "initialValue": {
                    "hexValue": "66616c7365",
                    "id": 190,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "667:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "654:18:3"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 195,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 192,
                        "name": "person",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 177,
                        "src": "684:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Person_$274_memory_ptr",
                          "typeString": "struct SAnswerConditionalCheck.Person memory"
                        }
                      },
                      "id": 193,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "691:4:3",
                      "memberName": "debt",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 273,
                      "src": "684:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 194,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "699:1:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "684:16:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 214,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "components": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 211,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 208,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 205,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 179,
                                "src": "832:6:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "*",
                              "rightExpression": {
                                "expression": {
                                  "id": 206,
                                  "name": "person",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 177,
                                  "src": "841:6:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Person_$274_memory_ptr",
                                    "typeString": "struct SAnswerConditionalCheck.Person memory"
                                  }
                                },
                                "id": 207,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "848:10:3",
                                "memberName": "collateral",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 271,
                                "src": "841:17:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "832:26:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "expression": {
                                "id": 209,
                                "name": "person",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 177,
                                "src": "861:6:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Person_$274_memory_ptr",
                                  "typeString": "struct SAnswerConditionalCheck.Person memory"
                                }
                              },
                              "id": 210,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "868:4:3",
                              "memberName": "debt",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 273,
                              "src": "861:11:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "832:40:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 212,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "831:42:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "hexValue": "313130",
                        "id": 213,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "876:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_110_by_1",
                          "typeString": "int_const 110"
                        },
                        "value": "110"
                      },
                      "src": "831:48:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "id": 224,
                      "nodeType": "Block",
                      "src": "950:78:3",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "hexValue": "436f6c6c61746572616c697a6174696f6e20726174696f20697320616c726561647920746f6f2068696768",
                                "id": 221,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "971:45:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_f7895da7855699e862e5982991293ac11efaa1c0e617a5abf5091503f7d659d3",
                                  "typeString": "literal_string \"Collateralization ratio is already too high\""
                                },
                                "value": "Collateralization ratio is already too high"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_f7895da7855699e862e5982991293ac11efaa1c0e617a5abf5091503f7d659d3",
                                  "typeString": "literal_string \"Collateralization ratio is already too high\""
                                }
                              ],
                              "id": 220,
                              "name": "revert",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                -19,
                                -19
                              ],
                              "referencedDeclaration": -19,
                              "src": "964:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                "typeString": "function (string memory) pure"
                              }
                            },
                            "id": 222,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "964:53:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 223,
                          "nodeType": "ExpressionStatement",
                          "src": "964:53:3"
                        }
                      ]
                    },
                    "id": 225,
                    "nodeType": "IfStatement",
                    "src": "828:200:3",
                    "trueBody": {
                      "id": 219,
                      "nodeType": "Block",
                      "src": "888:40:3",
                      "statements": [
                        {
                          "expression": {
                            "id": 217,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 215,
                              "name": "retOk",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 189,
                              "src": "906:5:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "hexValue": "74727565",
                              "id": 216,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "914:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            },
                            "src": "906:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 218,
                          "nodeType": "ExpressionStatement",
                          "src": "906:12:3"
                        }
                      ]
                    }
                  },
                  "id": 226,
                  "nodeType": "IfStatement",
                  "src": "681:347:3",
                  "trueBody": {
                    "id": 204,
                    "nodeType": "Block",
                    "src": "709:106:3",
                    "statements": [
                      {
                        "expression": {
                          "id": 198,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 196,
                            "name": "retOk",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 189,
                            "src": "723:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 197,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "731:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "723:12:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 199,
                        "nodeType": "ExpressionStatement",
                        "src": "723:12:3"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "hexValue": "436f6c6c61746572616c697a6174696f6e20726174696f206d757374206265206d6f7265207468616e2031313025",
                              "id": 201,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "756:48:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_55361d244ce576c004975195488e7beefed88de31518ddc7e437e4a14a18550a",
                                "typeString": "literal_string \"Collateralization ratio must be more than 110%\""
                              },
                              "value": "Collateralization ratio must be more than 110%"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_55361d244ce576c004975195488e7beefed88de31518ddc7e437e4a14a18550a",
                                "typeString": "literal_string \"Collateralization ratio must be more than 110%\""
                              }
                            ],
                            "id": 200,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -19,
                              -19
                            ],
                            "referencedDeclaration": -19,
                            "src": "749:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (string memory) pure"
                            }
                          },
                          "id": 202,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "749:56:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 203,
                        "nodeType": "ExpressionStatement",
                        "src": "749:56:3"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 227,
                    "name": "retOk",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 189,
                    "src": "1043:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 187,
                  "id": 228,
                  "nodeType": "Return",
                  "src": "1036:12:3"
                }
              ]
            },
            "baseFunctions": [
              264
            ],
            "documentation": {
              "id": 174,
              "nodeType": "StructuredDocumentation",
              "src": "328:122:3",
              "text": "A-3. 制御構文(if, for, require, revert), modifier, アクセス制御, オーナー権限を試す"
            },
            "functionSelector": "32c3095f",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 183,
                    "name": "person",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 177,
                    "src": "548:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Person_$274_memory_ptr",
                      "typeString": "struct SAnswerConditionalCheck.Person memory"
                    }
                  }
                ],
                "id": 184,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 182,
                  "name": "onlyYou",
                  "nameLocations": [
                    "540:7:3"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 249,
                  "src": "540:7:3"
                },
                "nodeType": "ModifierInvocation",
                "src": "540:15:3"
              }
            ],
            "name": "borrowMore",
            "nameLocation": "465:10:3",
            "overrides": {
              "id": 181,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "531:8:3"
            },
            "parameters": {
              "id": 180,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 177,
                  "mutability": "mutable",
                  "name": "person",
                  "nameLocation": "490:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 230,
                  "src": "476:20:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Person_$274_memory_ptr",
                    "typeString": "struct SAnswerConditionalCheck.Person"
                  },
                  "typeName": {
                    "id": 176,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 175,
                      "name": "Person",
                      "nameLocations": [
                        "476:6:3"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 274,
                      "src": "476:6:3"
                    },
                    "referencedDeclaration": 274,
                    "src": "476:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Person_$274_storage_ptr",
                      "typeString": "struct SAnswerConditionalCheck.Person"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 179,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "506:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 230,
                  "src": "498:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 178,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "498:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "475:38:3"
            },
            "returnParameters": {
              "id": 187,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 186,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 230,
                  "src": "565:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 185,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "565:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "564:6:3"
            },
            "scope": 250,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 249,
            "nodeType": "ModifierDefinition",
            "src": "1061:249:3",
            "nodes": [],
            "body": {
              "id": 248,
              "nodeType": "Block",
              "src": "1100:210:3",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 239,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 235,
                        "name": "person",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 233,
                        "src": "1139:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Person_$274_memory_ptr",
                          "typeString": "struct SAnswerConditionalCheck.Person memory"
                        }
                      },
                      "id": 236,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1146:4:3",
                      "memberName": "addr",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 269,
                      "src": "1139:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 237,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "1154:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 238,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1158:6:3",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "1154:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1139:25:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 246,
                    "nodeType": "Block",
                    "src": "1222:73:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "hexValue": "596f7520617265206e6f7420746865206f776e6572206f662074686973206163636f756e742e",
                              "id": 243,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1243:40:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_add0e6b8020a20b310a2fb75fb17c5704f0a4553df1356397c9de78c8e19f138",
                                "typeString": "literal_string \"You are not the owner of this account.\""
                              },
                              "value": "You are not the owner of this account."
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_add0e6b8020a20b310a2fb75fb17c5704f0a4553df1356397c9de78c8e19f138",
                                "typeString": "literal_string \"You are not the owner of this account.\""
                              }
                            ],
                            "id": 242,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -19,
                              -19
                            ],
                            "referencedDeclaration": -19,
                            "src": "1236:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (string memory) pure"
                            }
                          },
                          "id": 244,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1236:48:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 245,
                        "nodeType": "ExpressionStatement",
                        "src": "1236:48:3"
                      }
                    ]
                  },
                  "id": 247,
                  "nodeType": "IfStatement",
                  "src": "1136:159:3",
                  "trueBody": {
                    "id": 241,
                    "nodeType": "Block",
                    "src": "1174:26:3",
                    "statements": [
                      {
                        "id": 240,
                        "nodeType": "PlaceholderStatement",
                        "src": "1188:1:3"
                      }
                    ]
                  }
                }
              ]
            },
            "name": "onlyYou",
            "nameLocation": "1070:7:3",
            "parameters": {
              "id": 234,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 233,
                  "mutability": "mutable",
                  "name": "person",
                  "nameLocation": "1092:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 249,
                  "src": "1078:20:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Person_$274_memory_ptr",
                    "typeString": "struct SAnswerConditionalCheck.Person"
                  },
                  "typeName": {
                    "id": 232,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 231,
                      "name": "Person",
                      "nameLocations": [
                        "1078:6:3"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 274,
                      "src": "1078:6:3"
                    },
                    "referencedDeclaration": 274,
                    "src": "1078:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Person_$274_storage_ptr",
                      "typeString": "struct SAnswerConditionalCheck.Person"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1077:22:3"
            },
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 170,
              "name": "IAnswerConditionalCheck",
              "nameLocations": [
                "272:23:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 265,
              "src": "272:23:3"
            },
            "id": 171,
            "nodeType": "InheritanceSpecifier",
            "src": "272:23:3"
          },
          {
            "baseName": {
              "id": 172,
              "name": "SAnswerConditionalCheck",
              "nameLocations": [
                "297:23:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 275,
              "src": "297:23:3"
            },
            "id": 173,
            "nodeType": "InheritanceSpecifier",
            "src": "297:23:3"
          }
        ],
        "canonicalName": "AnswerConditionalCheck",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          250,
          275,
          265
        ],
        "name": "AnswerConditionalCheck",
        "nameLocation": "246:22:3",
        "scope": 251,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 3
}