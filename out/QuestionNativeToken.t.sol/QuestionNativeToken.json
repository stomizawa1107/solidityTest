{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "log_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "log_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "log_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "name": "log_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "log_named_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "val",
          "type": "bytes"
        }
      ],
      "name": "log_named_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "val",
          "type": "bytes32"
        }
      ],
      "name": "log_named_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        }
      ],
      "name": "log_named_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "val",
          "type": "string"
        }
      ],
      "name": "log_named_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "log_named_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "log_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "logs",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IS_TEST",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excludeArtifacts",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "excludedArtifacts_",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excludeContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "excludedContracts_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excludeSenders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "excludedSenders_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetArtifactSelectors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct StdInvariant.FuzzSelector[]",
          "name": "targetedArtifactSelectors_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetArtifacts",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "targetedArtifacts_",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targetedContracts_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetSelectors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct StdInvariant.FuzzSelector[]",
          "name": "targetedSelectors_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetSenders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targetedSenders_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test_Q4_NativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405260008054600160ff19918216811790925560048054909116909117905534801561002d57600080fd5b506118c28061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806385226c811161007157806385226c811461010e578063916a17c614610123578063b5508aa91461012b578063ba414fa614610133578063e20c9f711461014b578063fa7626d41461015357600080fd5b80630a9254e4146100b95780631ed7831c146100c357806329c26fff146100e15780633e5e3c23146100e95780633f7286f4146100f157806366d9a9a0146100f9575b600080fd5b6100c1610160565b005b6100cb6101b6565b6040516100d891906112d5565b60405180910390f35b6100c1610218565b6100cb610969565b6100cb6109c9565b610101610a29565b6040516100d89190611322565b610116610b18565b6040516100d89190611425565b610101610be8565b610116610cce565b61013b610d9e565b60405190151581526020016100d8565b6100cb610ebd565b60005461013b9060ff1681565b60405161016c906112c8565b604051809103906000f080158015610188573d6000803e3d6000fd5b50601b80546001600160a01b03929092166001600160a01b03199283168117909155601c8054909216179055565b6060600d80548060200260200160405190810160405280929190818152602001828054801561020e57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101f0575b5050505050905090565b6040805160a0810182526000606082018181526080830182905282528251808401845281815260208082018390528301529181019190915261027660405180604001604052806005815260200164416c69636560d81b815250610f1d565b81516001600160a01b0391821690528151606460209091015281515160405163c88a5e6d60e01b815291166004820152670de0b6b3a7640000602482015260008051602061186d8339815191529063c88a5e6d90604401600060405180830381600087803b1580156102e757600080fd5b505af11580156102fb573d6000803e3d6000fd5b50505050610323604051806040016040528060038152602001622137b160e91b815250610f1d565b602082810180516001600160a01b0393841690528051603c920191909152515160405163c88a5e6d60e01b815291166004820152671bc16d674ec80000602482015260008051602061186d8339815191529063c88a5e6d90604401600060405180830381600087803b15801561039857600080fd5b505af11580156103ac573d6000803e3d6000fd5b505082515160405163ca669fa760e01b81526001600160a01b03909116600482015260008051602061186d833981519152925063ca669fa79150602401600060405180830381600087803b15801561040357600080fd5b505af1158015610417573d6000803e3d6000fd5b5050601b548351604051637794ab8b60e11b815281516001600160a01b03908116600483015260209092015160248201529116925063ef2957169150604401600060405180830381600087803b15801561047057600080fd5b505af1158015610484573d6000803e3d6000fd5b5050505060208101515160405163ca669fa760e01b81526001600160a01b03909116600482015260008051602061186d8339815191529063ca669fa790602401600060405180830381600087803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b505060405163f28dceb360e01b815260206004820152600b60248201526a2cb7ba903330b4b632b21760a91b604482015260008051602061186d833981519152925063f28dceb39150606401600060405180830381600087803b15801561055857600080fd5b505af115801561056c573d6000803e3d6000fd5b5050601b54602084810151604051637794ab8b60e11b815281516001600160a01b03908116600483015291909201516024830152909116925063ef2957169150604401600060405180830381600087803b1580156105c957600080fd5b505af11580156105dd573d6000803e3d6000fd5b5050505060208101515160405163ca669fa760e01b81526001600160a01b03909116600482015260008051602061186d8339815191529063ca669fa790602401600060405180830381600087803b15801561063757600080fd5b505af115801561064b573d6000803e3d6000fd5b505060405163f28dceb360e01b815260206004820152600b60248201526a2cb7ba903330b4b632b21760a91b604482015260008051602061186d833981519152925063f28dceb39150606401600060405180830381600087803b1580156106b157600080fd5b505af11580156106c5573d6000803e3d6000fd5b5050601b54602084810151604051637794ab8b60e11b815281516001600160a01b03908116600483015291909201516024830152909116925063ef295716915067016345785d8a0000906044016000604051808303818588803b15801561072b57600080fd5b505af115801561073f573d6000803e3d6000fd5b5050601b5460208501515160405163b75c30db60e01b81526001600160a01b0391821660048201529116935063b75c30db925060240190506040805180830381865afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b7919061149e565b604083018190526107ca91506000610f2f565b60208101515160405163ca669fa760e01b81526001600160a01b03909116600482015260008051602061186d8339815191529063ca669fa790602401600060405180830381600087803b15801561082057600080fd5b505af1158015610834573d6000803e3d6000fd5b5050601b54602084810151604051637794ab8b60e11b815281516001600160a01b03908116600483015291909201516024830152909116925063ef2957169150670de0b6b3a7640000906044016000604051808303818588803b15801561089a57600080fd5b505af11580156108ae573d6000803e3d6000fd5b5050601b5460208501515160405163b75c30db60e01b81526001600160a01b0391821660048201529116935063b75c30db925060240190506040805180830381865afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610926919061149e565b60408301819052602080840151015161093f9250610f2f565b610966604051806040016040528060068152602001654b495441594f60d01b81525061105a565b50565b6060600f80548060200260200160405190810160405280929190818152602001828054801561020e576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f0575050505050905090565b6060600e80548060200260200160405190810160405280929190818152602001828054801561020e576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f0575050505050905090565b60606012805480602002602001604051908101604052809291908181526020016000905b82821015610b0f5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610af757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610ab95790505b50505050508152505081526020019060010190610a4d565b50505050905090565b60606011805480602002602001604051908101604052809291908181526020016000905b82821015610b0f578382906000526020600020018054610b5b906114ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610b87906114ca565b8015610bd45780601f10610ba957610100808354040283529160200191610bd4565b820191906000526020600020905b815481529060010190602001808311610bb757829003601f168201915b505050505081526020019060010190610b3c565b60606013805480602002602001604051908101604052809291908181526020016000905b82821015610b0f5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610cb657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610c785790505b50505050508152505081526020019060010190610c0c565b60606010805480602002602001604051908101604052809291908181526020016000905b82821015610b0f578382906000526020600020018054610d11906114ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3d906114ca565b8015610d8a5780601f10610d5f57610100808354040283529160200191610d8a565b820191906000526020600020905b815481529060010190602001808311610d6d57829003601f168201915b505050505081526020019060010190610cf2565b60008054610100900460ff1615610dbe5750600054610100900460ff1690565b600060008051602061186d8339815191523b15610eb8576040805160008051602061186d833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610e40917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611504565b60408051601f1981840301815290829052610e5a91611535565b6000604051808303816000865af19150503d8060008114610e97576040519150601f19603f3d011682016040523d82523d6000602084013e610e9c565b606091505b5091505080806020019051810190610eb49190611551565b9150505b919050565b6060600c80548060200260200160405190810160405280929190818152602001828054801561020e576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f0575050505050905090565b6000610f288261109d565b5092915050565b808214611056577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610fa09060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16110566111a7565b5050565b6109668160405160240161106e919061157a565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526112a7565b600080826040516020016110b19190611535565b60408051808303601f190181529082905280516020909101206001625e79b760e01b0319825260048201819052915060008051602061186d8339815191529063ffa1864990602401602060405180830381865afa158015611116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113a919061158d565b6040516318caf8e360e31b815290925060008051602061186d8339815191529063c657c7189061117090859087906004016115a8565b600060405180830381600087803b15801561118a57600080fd5b505af115801561119e573d6000803e3d6000fd5b50505050915091565b60008051602061186d8339815191523b15611296576040805160008051602061186d833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526112359291602001611504565b60408051601f198184030181529082905261124f91611535565b6000604051808303816000865af19150503d806000811461128c576040519150601f19603f3d011682016040523d82523d6000602084013e611291565b606091505b505050505b6000805461ff001916610100179055565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b610298806115d583390190565b6020808252825182820181905260009190848201906040850190845b818110156113165783516001600160a01b0316835292840192918401916001016112f1565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156113c657898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156113b15783516001600160e01b0319168252928b019260019290920191908b0190611387565b50978a0197955050509187019160010161134a565b50919998505050505050505050565b60005b838110156113f05781810151838201526020016113d8565b50506000910152565b600081518084526114118160208601602086016113d5565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561147a57603f198886030184526114688583516113f9565b9450928501929085019060010161144c565b5092979650505050505050565b80516001600160a01b0381168114610eb857600080fd5b600080604083850312156114b157600080fd5b6114ba83611487565b9150602083015190509250929050565b600181811c908216806114de57607f821691505b6020821081036114fe57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906115278160048501602087016113d5565b919091016004019392505050565b600082516115478184602087016113d5565b9190910192915050565b60006020828403121561156357600080fd5b8151801515811461157357600080fd5b9392505050565b60208152600061157360208301846113f9565b60006020828403121561159f57600080fd5b61157382611487565b6001600160a01b03831681526040602082018190526000906115cc908301846113f9565b94935050505056fe608060405234801561001057600080fd5b50610278806100206000396000f3fe6080604052600436106100295760003560e01c8063b75c30db1461002e578063ef29571614610091575b600080fd5b34801561003a57600080fd5b5061006e6100493660046101bb565b600060208190529081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520160405180910390f35b6100a461009f3660046101dd565b6100a6565b005b805181906001600160a01b031633146101155760405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468697320616360448201526531b7bab73a1760d11b60648201526084015b60405180910390fd5b670de0b6b3a76400003410156101675760508260200151116101675760405162461bcd60e51b815260206004820152600b60248201526a2cb7ba903330b4b632b21760a91b604482015260640161010c565b5033600090815260208181526040909120825181546001600160a01b0319166001600160a01b03909116178155910151600190910155565b80356001600160a01b03811681146101b657600080fd5b919050565b6000602082840312156101cd57600080fd5b6101d68261019f565b9392505050565b6000604082840312156101ef57600080fd5b6040516040810181811067ffffffffffffffff8211171561022057634e487b7160e01b600052604160045260246000fd5b60405261022c8361019f565b815260208301356020820152809150509291505056fea26469706673582212209219e2917a0daabaefee42e16e8424169f37650623e0df9dcb33919b5de7d03264736f6c634300081300330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220f84016229b12583df66bfa6ca66d6a055c7b3c71ae039bbd0c3ccc7fe8c62ed364736f6c63430008130033",
    "sourceMap": "242:1374:25:-:0;;;1572:26:29;;;1594:4;-1:-1:-1;;1572:26:29;;;;;;;;3288:44:32;;;;;;;;;;;242:1374:25;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806385226c811161007157806385226c811461010e578063916a17c614610123578063b5508aa91461012b578063ba414fa614610133578063e20c9f711461014b578063fa7626d41461015357600080fd5b80630a9254e4146100b95780631ed7831c146100c357806329c26fff146100e15780633e5e3c23146100e95780633f7286f4146100f157806366d9a9a0146100f9575b600080fd5b6100c1610160565b005b6100cb6101b6565b6040516100d891906112d5565b60405180910390f35b6100c1610218565b6100cb610969565b6100cb6109c9565b610101610a29565b6040516100d89190611322565b610116610b18565b6040516100d89190611425565b610101610be8565b610116610cce565b61013b610d9e565b60405190151581526020016100d8565b6100cb610ebd565b60005461013b9060ff1681565b60405161016c906112c8565b604051809103906000f080158015610188573d6000803e3d6000fd5b50601b80546001600160a01b03929092166001600160a01b03199283168117909155601c8054909216179055565b6060600d80548060200260200160405190810160405280929190818152602001828054801561020e57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101f0575b5050505050905090565b6040805160a0810182526000606082018181526080830182905282528251808401845281815260208082018390528301529181019190915261027660405180604001604052806005815260200164416c69636560d81b815250610f1d565b81516001600160a01b0391821690528151606460209091015281515160405163c88a5e6d60e01b815291166004820152670de0b6b3a7640000602482015260008051602061186d8339815191529063c88a5e6d90604401600060405180830381600087803b1580156102e757600080fd5b505af11580156102fb573d6000803e3d6000fd5b50505050610323604051806040016040528060038152602001622137b160e91b815250610f1d565b602082810180516001600160a01b0393841690528051603c920191909152515160405163c88a5e6d60e01b815291166004820152671bc16d674ec80000602482015260008051602061186d8339815191529063c88a5e6d90604401600060405180830381600087803b15801561039857600080fd5b505af11580156103ac573d6000803e3d6000fd5b505082515160405163ca669fa760e01b81526001600160a01b03909116600482015260008051602061186d833981519152925063ca669fa79150602401600060405180830381600087803b15801561040357600080fd5b505af1158015610417573d6000803e3d6000fd5b5050601b548351604051637794ab8b60e11b815281516001600160a01b03908116600483015260209092015160248201529116925063ef2957169150604401600060405180830381600087803b15801561047057600080fd5b505af1158015610484573d6000803e3d6000fd5b5050505060208101515160405163ca669fa760e01b81526001600160a01b03909116600482015260008051602061186d8339815191529063ca669fa790602401600060405180830381600087803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b505060405163f28dceb360e01b815260206004820152600b60248201526a2cb7ba903330b4b632b21760a91b604482015260008051602061186d833981519152925063f28dceb39150606401600060405180830381600087803b15801561055857600080fd5b505af115801561056c573d6000803e3d6000fd5b5050601b54602084810151604051637794ab8b60e11b815281516001600160a01b03908116600483015291909201516024830152909116925063ef2957169150604401600060405180830381600087803b1580156105c957600080fd5b505af11580156105dd573d6000803e3d6000fd5b5050505060208101515160405163ca669fa760e01b81526001600160a01b03909116600482015260008051602061186d8339815191529063ca669fa790602401600060405180830381600087803b15801561063757600080fd5b505af115801561064b573d6000803e3d6000fd5b505060405163f28dceb360e01b815260206004820152600b60248201526a2cb7ba903330b4b632b21760a91b604482015260008051602061186d833981519152925063f28dceb39150606401600060405180830381600087803b1580156106b157600080fd5b505af11580156106c5573d6000803e3d6000fd5b5050601b54602084810151604051637794ab8b60e11b815281516001600160a01b03908116600483015291909201516024830152909116925063ef295716915067016345785d8a0000906044016000604051808303818588803b15801561072b57600080fd5b505af115801561073f573d6000803e3d6000fd5b5050601b5460208501515160405163b75c30db60e01b81526001600160a01b0391821660048201529116935063b75c30db925060240190506040805180830381865afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b7919061149e565b604083018190526107ca91506000610f2f565b60208101515160405163ca669fa760e01b81526001600160a01b03909116600482015260008051602061186d8339815191529063ca669fa790602401600060405180830381600087803b15801561082057600080fd5b505af1158015610834573d6000803e3d6000fd5b5050601b54602084810151604051637794ab8b60e11b815281516001600160a01b03908116600483015291909201516024830152909116925063ef2957169150670de0b6b3a7640000906044016000604051808303818588803b15801561089a57600080fd5b505af11580156108ae573d6000803e3d6000fd5b5050601b5460208501515160405163b75c30db60e01b81526001600160a01b0391821660048201529116935063b75c30db925060240190506040805180830381865afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610926919061149e565b60408301819052602080840151015161093f9250610f2f565b610966604051806040016040528060068152602001654b495441594f60d01b81525061105a565b50565b6060600f80548060200260200160405190810160405280929190818152602001828054801561020e576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f0575050505050905090565b6060600e80548060200260200160405190810160405280929190818152602001828054801561020e576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f0575050505050905090565b60606012805480602002602001604051908101604052809291908181526020016000905b82821015610b0f5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610af757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610ab95790505b50505050508152505081526020019060010190610a4d565b50505050905090565b60606011805480602002602001604051908101604052809291908181526020016000905b82821015610b0f578382906000526020600020018054610b5b906114ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610b87906114ca565b8015610bd45780601f10610ba957610100808354040283529160200191610bd4565b820191906000526020600020905b815481529060010190602001808311610bb757829003601f168201915b505050505081526020019060010190610b3c565b60606013805480602002602001604051908101604052809291908181526020016000905b82821015610b0f5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610cb657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610c785790505b50505050508152505081526020019060010190610c0c565b60606010805480602002602001604051908101604052809291908181526020016000905b82821015610b0f578382906000526020600020018054610d11906114ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3d906114ca565b8015610d8a5780601f10610d5f57610100808354040283529160200191610d8a565b820191906000526020600020905b815481529060010190602001808311610d6d57829003601f168201915b505050505081526020019060010190610cf2565b60008054610100900460ff1615610dbe5750600054610100900460ff1690565b600060008051602061186d8339815191523b15610eb8576040805160008051602061186d833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610e40917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611504565b60408051601f1981840301815290829052610e5a91611535565b6000604051808303816000865af19150503d8060008114610e97576040519150601f19603f3d011682016040523d82523d6000602084013e610e9c565b606091505b5091505080806020019051810190610eb49190611551565b9150505b919050565b6060600c80548060200260200160405190810160405280929190818152602001828054801561020e576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101f0575050505050905090565b6000610f288261109d565b5092915050565b808214611056577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610fa09060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16110566111a7565b5050565b6109668160405160240161106e919061157a565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526112a7565b600080826040516020016110b19190611535565b60408051808303601f190181529082905280516020909101206001625e79b760e01b0319825260048201819052915060008051602061186d8339815191529063ffa1864990602401602060405180830381865afa158015611116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113a919061158d565b6040516318caf8e360e31b815290925060008051602061186d8339815191529063c657c7189061117090859087906004016115a8565b600060405180830381600087803b15801561118a57600080fd5b505af115801561119e573d6000803e3d6000fd5b50505050915091565b60008051602061186d8339815191523b15611296576040805160008051602061186d833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526112359291602001611504565b60408051601f198184030181529082905261124f91611535565b6000604051808303816000865af19150503d806000811461128c576040519150601f19603f3d011682016040523d82523d6000602084013e611291565b606091505b505050505b6000805461ff001916610100179055565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b610298806115d583390190565b6020808252825182820181905260009190848201906040850190845b818110156113165783516001600160a01b0316835292840192918401916001016112f1565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156113c657898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156113b15783516001600160e01b0319168252928b019260019290920191908b0190611387565b50978a0197955050509187019160010161134a565b50919998505050505050505050565b60005b838110156113f05781810151838201526020016113d8565b50506000910152565b600081518084526114118160208601602086016113d5565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561147a57603f198886030184526114688583516113f9565b9450928501929085019060010161144c565b5092979650505050505050565b80516001600160a01b0381168114610eb857600080fd5b600080604083850312156114b157600080fd5b6114ba83611487565b9150602083015190509250929050565b600181811c908216806114de57607f821691505b6020821081036114fe57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906115278160048501602087016113d5565b919091016004019392505050565b600082516115478184602087016113d5565b9190910192915050565b60006020828403121561156357600080fd5b8151801515811461157357600080fd5b9392505050565b60208152600061157360208301846113f9565b60006020828403121561159f57600080fd5b61157382611487565b6001600160a01b03831681526040602082018190526000906115cc908301846113f9565b94935050505056fe608060405234801561001057600080fd5b50610278806100206000396000f3fe6080604052600436106100295760003560e01c8063b75c30db1461002e578063ef29571614610091575b600080fd5b34801561003a57600080fd5b5061006e6100493660046101bb565b600060208190529081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520160405180910390f35b6100a461009f3660046101dd565b6100a6565b005b805181906001600160a01b031633146101155760405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468697320616360448201526531b7bab73a1760d11b60648201526084015b60405180910390fd5b670de0b6b3a76400003410156101675760508260200151116101675760405162461bcd60e51b815260206004820152600b60248201526a2cb7ba903330b4b632b21760a91b604482015260640161010c565b5033600090815260208181526040909120825181546001600160a01b0319166001600160a01b03909116178155910151600190910155565b80356001600160a01b03811681146101b657600080fd5b919050565b6000602082840312156101cd57600080fd5b6101d68261019f565b9392505050565b6000604082840312156101ef57600080fd5b6040516040810181811067ffffffffffffffff8211171561022057634e487b7160e01b600052604160045260246000fd5b60405261022c8361019f565b815260208301356020820152809150509291505056fea26469706673582212209219e2917a0daabaefee42e16e8424169f37650623e0df9dcb33919b5de7d03264736f6c634300081300330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220f84016229b12583df66bfa6ca66d6a055c7b3c71ae039bbd0c3ccc7fe8c62ed364736f6c63430008130033",
    "sourceMap": "242:1374:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;415:132;;;:::i;:::-;;2161:134:35;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;628:986:25;;;:::i;2930:133:35:-;;;:::i;2631:141::-;;;:::i;2447:178::-;;;:::i;:::-;;;;;;;:::i;2301:140::-;;;:::i;:::-;;;;;;;:::i;2778:146::-;;;:::i;1866:141::-;;;:::i;1819:584:29:-;;;:::i;:::-;;;3753:14:66;;3746:22;3728:41;;3716:2;3701:18;1819:584:29;3588:187:66;2013:142:35;;;:::i;1572:26:29:-;;;;;;;;;415:132:25;464:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;449:12:25;:38;;-1:-1:-1;;;;;449:38:25;;;;-1:-1:-1;;;;;;449:38:25;;;;;;;;497:19;:43;;;;;;;;415:132::o;2161:134:35:-;2208:33;2272:16;2253:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2253:35:35;;;;;;;;;;;;;;;;;;;;;;;2161:134;:::o;628:986:25:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;725:17:25;;;;;;;;;;;;;;-1:-1:-1;;;725:17:25;;;:8;:17::i;:::-;707:10;;-1:-1:-1;;;;;707:35:25;;;;;752:10;;771:3;752:16;;;;:22;792:10;;:15;784:33;;-1:-1:-1;;;784:33:25;;3998:32:66;;784:33:25;;;3980:51:66;809:7:25;4047:18:66;;;4040:34;-1:-1:-1;;;;;;;;;;;784:7:25;;;3953:18:66;;784:33:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;843:15;;;;;;;;;;;;;;-1:-1:-1;;;843:15:25;;;:8;:15::i;:::-;827:8;;;;;;-1:-1:-1;;;;;827:31:25;;;;;868:8;;885:2;868:14;;:19;;;;905:8;:13;897:31;;-1:-1:-1;;;897:31:25;;3998:32:66;;897:31:25;;;3980:51:66;920:7:25;4047:18:66;;;4040:34;-1:-1:-1;;;;;;;;;;;897:7:25;;;3953:18:66;;897:31:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;948:10:25;;:15;939:25;;-1:-1:-1;;;939:25:25;;-1:-1:-1;;;;;4554:32:66;;;939:25:25;;;4536:51:66;-1:-1:-1;;;;;;;;;;;939:8:25;-1:-1:-1;939:8:25;;-1:-1:-1;4509:18:66;;939:25:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;974:12:25;;1000:10;;974:37;;-1:-1:-1;;;974:37:25;;4832:13:66;;-1:-1:-1;;;;;4828:39:66;;;974:37:25;;;4810:58:66;4924:4;4912:17;;;4906:24;4884:20;;;4877:54;974:12:25;;;-1:-1:-1;974:25:25;;-1:-1:-1;4783:18:66;;974:37:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;1031:8:25;;;;:13;1022:23;;-1:-1:-1;;;1022:23:25;;-1:-1:-1;;;;;4554:32:66;;;1022:23:25;;;4536:51:66;-1:-1:-1;;;;;;;;;;;1022:8:25;;;4509:18:66;;1022:23:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1055:30:25;;-1:-1:-1;;;1055:30:25;;5143:2:66;1055:30:25;;;5125:21:66;5182:2;5162:18;;;5155:30;-1:-1:-1;;;5201:18:66;;;5194:41;-1:-1:-1;;;;;;;;;;;1055:15:25;-1:-1:-1;1055:15:25;;-1:-1:-1;5252:18:66;;1055:30:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1095:12:25;;1121:8;;;;;1095:35;;-1:-1:-1;;;1095:35:25;;4832:13:66;;-1:-1:-1;;;;;4828:39:66;;;1095:35:25;;;4810:58:66;4912:17;;;;4906:24;4884:20;;;4877:54;1095:12:25;;;;-1:-1:-1;1095:25:25;;-1:-1:-1;4783:18:66;;1095:35:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;1150:8:25;;;;:13;1141:23;;-1:-1:-1;;;1141:23:25;;-1:-1:-1;;;;;4554:32:66;;;1141:23:25;;;4536:51:66;-1:-1:-1;;;;;;;;;;;1141:8:25;;;4509:18:66;;1141:23:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1174:30:25;;-1:-1:-1;;;1174:30:25;;5143:2:66;1174:30:25;;;5125:21:66;5182:2;5162:18;;;5155:30;-1:-1:-1;;;5201:18:66;;;5194:41;-1:-1:-1;;;;;;;;;;;1174:15:25;-1:-1:-1;1174:15:25;;-1:-1:-1;5252:18:66;;1174:30:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1214:12:25;;1253:8;;;;;1214:48;;-1:-1:-1;;;1214:48:25;;4832:13:66;;-1:-1:-1;;;;;4828:39:66;;;1214:48:25;;;4810:58:66;4912:17;;;;4906:24;4884:20;;;4877:54;1214:12:25;;;;-1:-1:-1;1214:25:25;;-1:-1:-1;1247:4:25;;4783:18:66;;1214:48:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1290:12:25;;1318:8;;;;:13;1290:42;;-1:-1:-1;;;1290:42:25;;-1:-1:-1;;;;;4554:32:66;;;1290:42:25;;;4536:51:66;1290:12:25;;;-1:-1:-1;1290:27:25;;-1:-1:-1;4509:18:66;;;-1:-1:-1;1290:42:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1276:10;;;1273:59;;;1342:23;;-1:-1:-1;1363:1:25;1342:8;:23::i;:::-;1385:8;;;;:13;1376:23;;-1:-1:-1;;;1376:23:25;;-1:-1:-1;;;;;4554:32:66;;;1376:23:25;;;4536:51:66;-1:-1:-1;;;;;;;;;;;1376:8:25;;;4509:18:66;;1376:23:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1409:12:25;;1451:8;;;;;1409:51;;-1:-1:-1;;;1409:51:25;;4832:13:66;;-1:-1:-1;;;;;4828:39:66;;;1409:51:25;;;4810:58:66;4912:17;;;;4906:24;4884:20;;;4877:54;1409:12:25;;;;-1:-1:-1;1409:25:25;;-1:-1:-1;1442:7:25;;4783:18:66;;1409:51:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1488:12:25;;1516:8;;;;:13;1488:42;;-1:-1:-1;;;1488:42:25;;-1:-1:-1;;;;;4554:32:66;;;1488:42:25;;;4536:51:66;1488:12:25;;;-1:-1:-1;1488:27:25;;-1:-1:-1;4509:18:66;;;-1:-1:-1;1488:42:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1474:10;;;1471:59;;;1561:8;;;;;:14;;1540:36;;-1:-1:-1;1540:8:25;:36::i;:::-;1586:21;;;;;;;;;;;;;;-1:-1:-1;;;1586:21:25;;;:11;:21::i;:::-;666:948;628:986::o;2930:133:35:-;2976:33;3040:16;3021:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3021:35:35;;;;;;;;;;;;;;;;;;;;;;2930:133;:::o;2631:141::-;2679:35;2747:18;2726:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2726:39:35;;;;;;;;;;;;;;;;;;;;;;2631:141;:::o;2447:178::-;2503:48;2592:26;2563:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2563:55:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2563:55:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2447:178;:::o;2301:140::-;2349:34;2416:18;2395:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2778:146;2826:40;2899:18;2878:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2878:39:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2878:39:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1866:141;1915:34;1982:18;1961:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1819:584:29;1853:4;1873:7;;;;;;;1869:528;;;-1:-1:-1;1903:7:29;;;;;;;;1819:584::o;1869:528::-;1941:17;-1:-1:-1;;;;;;;;;;;2985:55:29;3066:16;1980:374;;2196:43;;;-1:-1:-1;;;;;;;;;;;2196:43:29;;;3980:51:66;;;-1:-1:-1;;;4047:18:66;;;4040:34;2196:43:29;;;;;;;;;3953:18:66;;;2196:43:29;;;-1:-1:-1;;1671:64:29;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;-1:-1:-1;;2086:175:29;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;2002:352;1980:374;2374:12;1819:584;-1:-1:-1;1819:584:29:o;2013:142:35:-;2062:35;2130:18;2109:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2109:39:35;;;;;;;;;;;;;;;;;;;;;;2013:142;:::o;15314:125:33:-;15378:12;15412:20;15427:4;15412:14;:20::i;:::-;-1:-1:-1;15402:30:33;15314:125;-1:-1:-1;;15314:125:33:o;5209:262:29:-;5271:1;5266;:6;5262:203;;5293:41;;;;;7566:2:66;7548:21;;;7605:2;7585:18;;;7578:30;7644:34;7639:2;7624:18;;7617:62;-1:-1:-1;;;7710:2:66;7695:18;;7688:32;7752:3;7737:19;;7364:398;5293:41:29;;;;;;;;5353:31;;;7979:21:66;;;8036:2;8016:18;;;8009:30;-1:-1:-1;;;8070:2:66;8055:18;;8048:40;8155:4;8140:20;;8133:36;;;5353:31:29;;;;;;;8120:3:66;5353:31:29;;;5403;;;8392:21:66;;;8449:2;8429:18;;;8422:30;-1:-1:-1;;;8483:2:66;8468:18;;8461:40;8568:4;8553:20;;8546:36;;;5403:31:29;;;;;;;8533:3:66;5403:31:29;;;5448:6;:4;:6::i;:::-;5209:262;;:::o;5630:121:43:-;5685:59;5740:2;5701:42;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5701:42:43;;;;;;;;;;;;;;-1:-1:-1;;;;;5701:42:43;-1:-1:-1;;;5701:42:43;;;5685:15;:59::i;15033:242:33:-;15103:12;15117:18;15195:4;15178:22;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;15178:22:33;;;;;;;15168:33;;15178:22;15168:33;;;;-1:-1:-1;;;;;;15219:19:33;;;;;9258:25:66;;;15168:33:33;-1:-1:-1;;;;;;;;;;;;15219:7:33;;;9231:18:66;;15219:19:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15248:20;;-1:-1:-1;;;15248:20:33;;15212:26;;-1:-1:-1;;;;;;;;;;;;15248:8:33;;;:20;;15212:26;;15263:4;;15248:20;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15033:242;;;:::o;2409:432:29:-;-1:-1:-1;;;;;;;;;;;2985:55:29;3066:16;2452:359;;2652:67;;;-1:-1:-1;;;;;;;;;;;2652:67:29;;;10031:51:66;;;-1:-1:-1;;;10098:18:66;;;10091:34;;;;2712:4:29;10141:18:66;;;10134:34;2489:11:29;;1671:64;2586:43;;10004:18:66;;2652:67:29;;;-1:-1:-1;;2652:67:29;;;;;;;;;;2541:196;;;2652:67;2541:196;;:::i;:::-;;;;-1:-1:-1;;2541:196:29;;;;;;;;;;2506:245;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2452:359:29;2820:7;:14;;-1:-1:-1;;2820:14:29;;;;;2409:432::o;181:376:43:-;275:14;;131:42;448:2;435:16;;251:21;;275:14;435:16;131:42;484:5;473:68;464:77;;401:150;;181:376;:::o;-1:-1:-1:-;;;;;;;;:::o;14:658:66:-;185:2;237:21;;;307:13;;210:18;;;329:22;;;156:4;;185:2;408:15;;;;382:2;367:18;;;156:4;451:195;465:6;462:1;459:13;451:195;;;530:13;;-1:-1:-1;;;;;526:39:66;514:52;;621:15;;;;586:12;;;;562:1;480:9;451:195;;;-1:-1:-1;663:3:66;;14:658;-1:-1:-1;;;;;;14:658:66:o;677:1567::-;879:4;908:2;948;937:9;933:18;978:2;967:9;960:21;1001:6;1036;1030:13;1067:6;1059;1052:22;1093:2;1083:12;;1126:2;1115:9;1111:18;1104:25;;1188:2;1178:6;1175:1;1171:14;1160:9;1156:30;1152:39;1226:2;1218:6;1214:15;1247:1;1268;1278:937;1294:6;1289:3;1286:15;1278:937;;;1363:22;;;-1:-1:-1;;1359:36:66;1347:49;;1419:13;;1506:9;;-1:-1:-1;;;;;1502:35:66;1487:51;;1577:11;;1571:18;1609:15;;;1602:27;;;1690:19;;1459:15;;;1722:24;;;1812:21;;;;1857:1;;1780:2;1768:15;;;1871:236;1887:8;1882:3;1879:17;1871:236;;;1968:15;;-1:-1:-1;;;;;;1964:42:66;1950:57;;2076:17;;;;1915:1;1906:11;;;;;2033:14;;;;1871:236;;;-1:-1:-1;2193:12:66;;;;2130:5;-1:-1:-1;;;2158:15:66;;;;1320:1;1311:11;1278:937;;;-1:-1:-1;2232:6:66;;677:1567;-1:-1:-1;;;;;;;;;677:1567:66:o;2249:250::-;2334:1;2344:113;2358:6;2355:1;2352:13;2344:113;;;2434:11;;;2428:18;2415:11;;;2408:39;2380:2;2373:10;2344:113;;;-1:-1:-1;;2491:1:66;2473:16;;2466:27;2249:250::o;2504:271::-;2546:3;2584:5;2578:12;2611:6;2606:3;2599:19;2627:76;2696:6;2689:4;2684:3;2680:14;2673:4;2666:5;2662:16;2627:76;:::i;:::-;2757:2;2736:15;-1:-1:-1;;2732:29:66;2723:39;;;;2764:4;2719:50;;2504:271;-1:-1:-1;;2504:271:66:o;2780:803::-;2942:4;2971:2;3011;3000:9;2996:18;3041:2;3030:9;3023:21;3064:6;3099;3093:13;3130:6;3122;3115:22;3168:2;3157:9;3153:18;3146:25;;3230:2;3220:6;3217:1;3213:14;3202:9;3198:30;3194:39;3180:53;;3268:2;3260:6;3256:15;3289:1;3299:255;3313:6;3310:1;3307:13;3299:255;;;3406:2;3402:7;3390:9;3382:6;3378:22;3374:36;3369:3;3362:49;3434:40;3467:6;3458;3452:13;3434:40;:::i;:::-;3424:50;-1:-1:-1;3532:12:66;;;;3497:15;;;;3335:1;3328:9;3299:255;;;-1:-1:-1;3571:6:66;;2780:803;-1:-1:-1;;;;;;;2780:803:66:o;5281:177::-;5360:13;;-1:-1:-1;;;;;5402:31:66;;5392:42;;5382:70;;5448:1;5445;5438:12;5463:269;5542:6;5550;5603:2;5591:9;5582:7;5578:23;5574:32;5571:52;;;5619:1;5616;5609:12;5571:52;5642:40;5672:9;5642:40;:::i;:::-;5632:50;;5722:2;5711:9;5707:18;5701:25;5691:35;;5463:269;;;;;:::o;5737:380::-;5816:1;5812:12;;;;5859;;;5880:61;;5934:4;5926:6;5922:17;5912:27;;5880:61;5987:2;5979:6;5976:14;5956:18;5953:38;5950:161;;6033:10;6028:3;6024:20;6021:1;6014:31;6068:4;6065:1;6058:15;6096:4;6093:1;6086:15;5950:161;;5737:380;;;:::o;6401:384::-;-1:-1:-1;;;;;;6586:33:66;;6574:46;;6643:13;;6556:3;;6665:74;6643:13;6728:1;6719:11;;6712:4;6700:17;;6665:74;:::i;:::-;6759:16;;;;6777:1;6755:24;;6401:384;-1:-1:-1;;;6401:384:66:o;6790:287::-;6919:3;6957:6;6951:13;6973:66;7032:6;7027:3;7020:4;7012:6;7008:17;6973:66;:::i;:::-;7055:16;;;;;6790:287;-1:-1:-1;;6790:287:66:o;7082:277::-;7149:6;7202:2;7190:9;7181:7;7177:23;7173:32;7170:52;;;7218:1;7215;7208:12;7170:52;7250:9;7244:16;7303:5;7296:13;7289:21;7282:5;7279:32;7269:60;;7325:1;7322;7315:12;7269:60;7348:5;7082:277;-1:-1:-1;;;7082:277:66:o;8593:220::-;8742:2;8731:9;8724:21;8705:4;8762:45;8803:2;8792:9;8788:18;8780:6;8762:45;:::i;9294:208::-;9364:6;9417:2;9405:9;9396:7;9392:23;9388:32;9385:52;;;9433:1;9430;9423:12;9385:52;9456:40;9486:9;9456:40;:::i;9507:317::-;-1:-1:-1;;;;;9684:32:66;;9666:51;;9753:2;9748;9733:18;;9726:30;;;-1:-1:-1;;9773:45:66;;9799:18;;9791:6;9773:45;:::i;:::-;9765:53;9507:317;-1:-1:-1;;;;9507:317:66:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "IS_TEST()": "fa7626d4",
    "excludeArtifacts()": "b5508aa9",
    "excludeContracts()": "e20c9f71",
    "excludeSenders()": "1ed7831c",
    "failed()": "ba414fa6",
    "setUp()": "0a9254e4",
    "targetArtifactSelectors()": "66d9a9a0",
    "targetArtifacts()": "85226c81",
    "targetContracts()": "3f7286f4",
    "targetSelectors()": "916a17c6",
    "targetSenders()": "3e5e3c23",
    "test_Q4_NativeToken()": "29c26fff"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_Q4_NativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"test_Q4_NativeToken()\":{\"notice\":\"Q-4. \\u30cd\\u30a4\\u30c6\\u30a3\\u30d6\\u30c8\\u30fc\\u30af\\u30f3\\u652f\\u6255\\u3044\\u3092\\u8a66\\u3059\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/Q4/QuestionNativeToken.t.sol\":\"QuestionNativeToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=util/lib/openzeppelin-contracts/\",\":ds-test/=util/lib/forge-std/lib/ds-test/src/\",\":forge-std/=util/lib/forge-std/src/\",\":openzeppelin-contracts/=util/lib/openzeppelin-contracts/\",\":scal-std/=util/lib/scal-std/src/\",\":src/=contracts/src/\",\":test/=test/\"]},\"sources\":{\"contracts/src/A4/AnswerNativeToken.sol\":{\"keccak256\":\"0xf092910ffd218e875ea9d43fbc7c00e9e104b7fd43a3b93f0ac7b3325fe59fbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b41e3dbcd10cb2c5f428218e06e5e7ba7584da92eacaaebae220b5b67f2d3ed8\",\"dweb:/ipfs/QmdoCk9LQYUJ5SKGFQPZmXqSeaRsZbtDEHuFVhd7u7DbZT\"]},\"contracts/src/A4/interfaces/IAnswerNativeToken.sol\":{\"keccak256\":\"0xdc3f10f2bfbd882bfdb055556ee34c4cfc630dfd8f3326bd21383aa2402f830f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b45bdd50d3788b7f1570fbc631fc7b0a15f124206d06da93c7fd100bcc8e392b\",\"dweb:/ipfs/QmTSSvqgXuyWPcHYgt8n7XNF8Mcs5caHjvJAwP5ioSyjEf\"]},\"contracts/src/A4/interfaces/SAnswerNativeToken.sol\":{\"keccak256\":\"0xeb313fd13f203f7346fb67e5f3cad4cf1b5742b4ce06f564d6e96e05766df4a2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://727c7b08086e9371ff497619c8247e8059b1b400d50e36ffe605d4ca81744910\",\"dweb:/ipfs/QmZCNmXHabYFMWEYVZN68J2Ns756ErPPFdg1p57fuawTTt\"]},\"test/Q4/QuestionNativeToken.t.sol\":{\"keccak256\":\"0x277b058b3c065be261e8d5188613f852841de970ba9a5910b4c8729e1de74e07\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8d3d45831eabd33b0328fa7934ad267a55a32391ef5c90ac349f7ff980ba1e\",\"dweb:/ipfs/QmTMHb5prAkoTJby92sWPJ3bvZKHx4jurX7WhpS1yik58B\"]},\"test/Q4/interfaces/IQuestionNativeToken.sol\":{\"keccak256\":\"0x4783418611a54dfeb6806283c79a30d4491f29b56fd57c7504a83bc7a2834be6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://54448a8a9cb92e435be4bf4701cd9ab6d63af7cf8013912d1139cacc67a4b246\",\"dweb:/ipfs/QmcFEh2HRKTdgLu7HGFqo1GNDGK7ffKXtoMwtEi2azD7Us\"]},\"util/lib/forge-std/lib/ds-test/src/test.sol\":{\"keccak256\":\"0x4c1915908e867ed8ed9fe731dff0e1d4980f5a11a1fd1894f2800b2ae2070154\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c9d7f9295364406115e820a14be670e54603f00fc9474093613409743db53749\",\"dweb:/ipfs/QmNjUUo9DK6xnfLjXYPc3qUznJv2PmSbaEXZCyyGRf5v5V\"]},\"util/lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x609e3a00319169988cc8272e837f350a9ba77cf8f8f62e4897a8e4a8a5f0fb27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b24435e35ba5b080ebd6e8976c23fb735c7212d042be8462ffd2ea50c5250363\",\"dweb:/ipfs/QmPeVvN7FS4oMmCuYAeRdZihTfrG4tA7Vvunuvv59a6wre\"]},\"util/lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0xdb05fd11858f232b8b5c6c9175229bdd061c277c34f13b0bdc64d333bcbd2617\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08ae865564d9c1fa1012b61db77a2da2844ac1ae0a216b16c9fe9ab65ddf80af\",\"dweb:/ipfs/QmfFfmkjb2Qfc5dPJvwQgjTMbeQ12dTPFeAQ8Gb944U44g\"]},\"util/lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x097b75f7171af89f433407e040d11b22fc26e2fe03793c2cfe18cad390d7af8b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://19d1dca7b398e517499ffa65ad44df69cdd016f37dc57e2d07d50279d3ddee17\",\"dweb:/ipfs/QmfMFR25367GB5PoBi1KZxWs1hZcJtC3eANiioG3dKj8ah\"]},\"util/lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0x3c536209b4d4e1879adc4d91b12e237985f0f8f91e71828dacd8fca3bdf2fa99\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65adfc61088d242dbab8faa738d104005531e3a52ed993329b54fa7ee45e53ab\",\"dweb:/ipfs/QmP1d4thtELTT2vup4XmrCSKXZ91Eq756pgKq1z5hq2NGP\"]},\"util/lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"util/lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0xd855e1fea6247f1bef118e2bee9f0039832988b7173fd17766bba4014ae26a3c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c58c0f0b66852dfd3c76fb7958d8b023489d7a874c7cb1ad4f2021f9ec8ab477\",\"dweb:/ipfs/Qmd3MX9HAkNUhPddL29ekwhqgRnjAobZ35UzchaJZNACCN\"]},\"util/lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x9e2a7521190c462a0667706385f1c52a816220a9813ca8ac520fba7ba45d660b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d23017fe6570b28130a731b86179352b93a5fb5af32f11559837afc1186293c\",\"dweb:/ipfs/QmR3p6zG5Kmcr8gKocFCSopLHfXv1AziPJbH17nKyMxwxV\"]},\"util/lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"util/lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xd1517df281f973dba8b7ba52c02d3df552b60d91b8f47e4669049da648778673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://52e43264f58a5dcfd985f3c99aa81064805aa8f1c2b4c6521fd63d45cdbba8d5\",\"dweb:/ipfs/QmUMTF6cRjt5tCQrrgQDXVRmHQLjevNsTvLFdaA1m9TBj9\"]},\"util/lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x2882555b0f58e48144e46e9aa5118a506b31ad7485327d54e8f681e8b414c337\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2850bcb1322de9d9dd87ded42debbe0e8fc4048173788d4c00c98b50e5f76985\",\"dweb:/ipfs/QmUiPKnj7GZLLQbJGY7bVDu79Q9jGEYNjR5ZBgwFy8mH97\"]},\"util/lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x6584855fecbe5b6a9f8ebdb26b37c58532c5bc5cc6e1737dfa7c8a045087be55\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40a35a4d292b4fed02e11d5f25fb474f10a7c4eb99f75b5383dc23fcb6e55d3c\",\"dweb:/ipfs/QmYZ2nz1EmNh4xLWf4YybZoa1Da1z3Wq3w4pneMhkouMi4\"]},\"util/lib/forge-std/src/Test.sol\":{\"keccak256\":\"0xddf16afce2bb7bbb69ed868d4c7ee8b4ea4ffbf8929427fe799682f107534945\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://52f6ebde2a4cb9d08aea5fb3d62b2f15961bb9a29d6d9e30dd0859d0d631cabf\",\"dweb:/ipfs/QmeJ9Dp1GYUggzjGiwTZkxCfB15NfyfgcyrNZL5tyWZbVZ\"]},\"util/lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xdd9f518aade851117d3ca3122cae6ed413a8b8355d43d69db336e94da3214a96\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://939ede17edec5c78176379839f4c68851b1316e8f5789efb2f01cbdae09b88ef\",\"dweb:/ipfs/QmYiBBb7Nyuse7HoEFkCeauUwcpef9S33ozZYDqXCEXEtH\"]},\"util/lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"util/lib/forge-std/src/console2.sol\":{\"keccak256\":\"0xcd5706f5a7025825d9fd389c89b49bf571f9abaea8a062dc4048320b5b43bf46\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c066485a7d4bd18d44efb4c89274b0959e8066b9a480383a2ce07d7f31555f88\",\"dweb:/ipfs/QmckeYfA5FtAjcxaytq69Dpj6uY57tbQ61kNPPxXi9kgbW\"]},\"util/lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256",
              "name": "",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "val",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "val",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "val",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "val",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "logs",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "IS_TEST",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "excludeArtifacts",
          "outputs": [
            {
              "internalType": "string[]",
              "name": "excludedArtifacts_",
              "type": "string[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "excludeContracts",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "excludedContracts_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "excludeSenders",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "excludedSenders_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "failed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setUp"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetArtifactSelectors",
          "outputs": [
            {
              "internalType": "struct StdInvariant.FuzzSelector[]",
              "name": "targetedArtifactSelectors_",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "selectors",
                  "type": "bytes4[]"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetArtifacts",
          "outputs": [
            {
              "internalType": "string[]",
              "name": "targetedArtifacts_",
              "type": "string[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetContracts",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "targetedContracts_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetSelectors",
          "outputs": [
            {
              "internalType": "struct StdInvariant.FuzzSelector[]",
              "name": "targetedSelectors_",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "selectors",
                  "type": "bytes4[]"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetSenders",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "targetedSenders_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "test_Q4_NativeToken"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "test_Q4_NativeToken()": {
            "notice": "Q-4. ネイティブトークン支払いを試す"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=util/lib/openzeppelin-contracts/",
        ":ds-test/=util/lib/forge-std/lib/ds-test/src/",
        ":forge-std/=util/lib/forge-std/src/",
        ":openzeppelin-contracts/=util/lib/openzeppelin-contracts/",
        ":scal-std/=util/lib/scal-std/src/",
        ":src/=contracts/src/",
        ":test/=test/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "test/Q4/QuestionNativeToken.t.sol": "QuestionNativeToken"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/src/A4/AnswerNativeToken.sol": {
        "keccak256": "0xf092910ffd218e875ea9d43fbc7c00e9e104b7fd43a3b93f0ac7b3325fe59fbd",
        "urls": [
          "bzz-raw://b41e3dbcd10cb2c5f428218e06e5e7ba7584da92eacaaebae220b5b67f2d3ed8",
          "dweb:/ipfs/QmdoCk9LQYUJ5SKGFQPZmXqSeaRsZbtDEHuFVhd7u7DbZT"
        ],
        "license": "MIT"
      },
      "contracts/src/A4/interfaces/IAnswerNativeToken.sol": {
        "keccak256": "0xdc3f10f2bfbd882bfdb055556ee34c4cfc630dfd8f3326bd21383aa2402f830f",
        "urls": [
          "bzz-raw://b45bdd50d3788b7f1570fbc631fc7b0a15f124206d06da93c7fd100bcc8e392b",
          "dweb:/ipfs/QmTSSvqgXuyWPcHYgt8n7XNF8Mcs5caHjvJAwP5ioSyjEf"
        ],
        "license": "MIT"
      },
      "contracts/src/A4/interfaces/SAnswerNativeToken.sol": {
        "keccak256": "0xeb313fd13f203f7346fb67e5f3cad4cf1b5742b4ce06f564d6e96e05766df4a2",
        "urls": [
          "bzz-raw://727c7b08086e9371ff497619c8247e8059b1b400d50e36ffe605d4ca81744910",
          "dweb:/ipfs/QmZCNmXHabYFMWEYVZN68J2Ns756ErPPFdg1p57fuawTTt"
        ],
        "license": "MIT"
      },
      "test/Q4/QuestionNativeToken.t.sol": {
        "keccak256": "0x277b058b3c065be261e8d5188613f852841de970ba9a5910b4c8729e1de74e07",
        "urls": [
          "bzz-raw://cc8d3d45831eabd33b0328fa7934ad267a55a32391ef5c90ac349f7ff980ba1e",
          "dweb:/ipfs/QmTMHb5prAkoTJby92sWPJ3bvZKHx4jurX7WhpS1yik58B"
        ],
        "license": "MIT"
      },
      "test/Q4/interfaces/IQuestionNativeToken.sol": {
        "keccak256": "0x4783418611a54dfeb6806283c79a30d4491f29b56fd57c7504a83bc7a2834be6",
        "urls": [
          "bzz-raw://54448a8a9cb92e435be4bf4701cd9ab6d63af7cf8013912d1139cacc67a4b246",
          "dweb:/ipfs/QmcFEh2HRKTdgLu7HGFqo1GNDGK7ffKXtoMwtEi2azD7Us"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/lib/ds-test/src/test.sol": {
        "keccak256": "0x4c1915908e867ed8ed9fe731dff0e1d4980f5a11a1fd1894f2800b2ae2070154",
        "urls": [
          "bzz-raw://c9d7f9295364406115e820a14be670e54603f00fc9474093613409743db53749",
          "dweb:/ipfs/QmNjUUo9DK6xnfLjXYPc3qUznJv2PmSbaEXZCyyGRf5v5V"
        ],
        "license": "GPL-3.0-or-later"
      },
      "util/lib/forge-std/src/Base.sol": {
        "keccak256": "0x609e3a00319169988cc8272e837f350a9ba77cf8f8f62e4897a8e4a8a5f0fb27",
        "urls": [
          "bzz-raw://b24435e35ba5b080ebd6e8976c23fb735c7212d042be8462ffd2ea50c5250363",
          "dweb:/ipfs/QmPeVvN7FS4oMmCuYAeRdZihTfrG4tA7Vvunuvv59a6wre"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/StdAssertions.sol": {
        "keccak256": "0xdb05fd11858f232b8b5c6c9175229bdd061c277c34f13b0bdc64d333bcbd2617",
        "urls": [
          "bzz-raw://08ae865564d9c1fa1012b61db77a2da2844ac1ae0a216b16c9fe9ab65ddf80af",
          "dweb:/ipfs/QmfFfmkjb2Qfc5dPJvwQgjTMbeQ12dTPFeAQ8Gb944U44g"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/StdChains.sol": {
        "keccak256": "0x097b75f7171af89f433407e040d11b22fc26e2fe03793c2cfe18cad390d7af8b",
        "urls": [
          "bzz-raw://19d1dca7b398e517499ffa65ad44df69cdd016f37dc57e2d07d50279d3ddee17",
          "dweb:/ipfs/QmfMFR25367GB5PoBi1KZxWs1hZcJtC3eANiioG3dKj8ah"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/StdCheats.sol": {
        "keccak256": "0x3c536209b4d4e1879adc4d91b12e237985f0f8f91e71828dacd8fca3bdf2fa99",
        "urls": [
          "bzz-raw://65adfc61088d242dbab8faa738d104005531e3a52ed993329b54fa7ee45e53ab",
          "dweb:/ipfs/QmP1d4thtELTT2vup4XmrCSKXZ91Eq756pgKq1z5hq2NGP"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/StdError.sol": {
        "keccak256": "0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77",
        "urls": [
          "bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6",
          "dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/StdInvariant.sol": {
        "keccak256": "0xd855e1fea6247f1bef118e2bee9f0039832988b7173fd17766bba4014ae26a3c",
        "urls": [
          "bzz-raw://c58c0f0b66852dfd3c76fb7958d8b023489d7a874c7cb1ad4f2021f9ec8ab477",
          "dweb:/ipfs/Qmd3MX9HAkNUhPddL29ekwhqgRnjAobZ35UzchaJZNACCN"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/StdJson.sol": {
        "keccak256": "0x9e2a7521190c462a0667706385f1c52a816220a9813ca8ac520fba7ba45d660b",
        "urls": [
          "bzz-raw://7d23017fe6570b28130a731b86179352b93a5fb5af32f11559837afc1186293c",
          "dweb:/ipfs/QmR3p6zG5Kmcr8gKocFCSopLHfXv1AziPJbH17nKyMxwxV"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/StdMath.sol": {
        "keccak256": "0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2",
        "urls": [
          "bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92",
          "dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/StdStorage.sol": {
        "keccak256": "0xd1517df281f973dba8b7ba52c02d3df552b60d91b8f47e4669049da648778673",
        "urls": [
          "bzz-raw://52e43264f58a5dcfd985f3c99aa81064805aa8f1c2b4c6521fd63d45cdbba8d5",
          "dweb:/ipfs/QmUMTF6cRjt5tCQrrgQDXVRmHQLjevNsTvLFdaA1m9TBj9"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/StdStyle.sol": {
        "keccak256": "0x2882555b0f58e48144e46e9aa5118a506b31ad7485327d54e8f681e8b414c337",
        "urls": [
          "bzz-raw://2850bcb1322de9d9dd87ded42debbe0e8fc4048173788d4c00c98b50e5f76985",
          "dweb:/ipfs/QmUiPKnj7GZLLQbJGY7bVDu79Q9jGEYNjR5ZBgwFy8mH97"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/StdUtils.sol": {
        "keccak256": "0x6584855fecbe5b6a9f8ebdb26b37c58532c5bc5cc6e1737dfa7c8a045087be55",
        "urls": [
          "bzz-raw://40a35a4d292b4fed02e11d5f25fb474f10a7c4eb99f75b5383dc23fcb6e55d3c",
          "dweb:/ipfs/QmYZ2nz1EmNh4xLWf4YybZoa1Da1z3Wq3w4pneMhkouMi4"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/Test.sol": {
        "keccak256": "0xddf16afce2bb7bbb69ed868d4c7ee8b4ea4ffbf8929427fe799682f107534945",
        "urls": [
          "bzz-raw://52f6ebde2a4cb9d08aea5fb3d62b2f15961bb9a29d6d9e30dd0859d0d631cabf",
          "dweb:/ipfs/QmeJ9Dp1GYUggzjGiwTZkxCfB15NfyfgcyrNZL5tyWZbVZ"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/Vm.sol": {
        "keccak256": "0xdd9f518aade851117d3ca3122cae6ed413a8b8355d43d69db336e94da3214a96",
        "urls": [
          "bzz-raw://939ede17edec5c78176379839f4c68851b1316e8f5789efb2f01cbdae09b88ef",
          "dweb:/ipfs/QmYiBBb7Nyuse7HoEFkCeauUwcpef9S33ozZYDqXCEXEtH"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/console.sol": {
        "keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
        "urls": [
          "bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
          "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/console2.sol": {
        "keccak256": "0xcd5706f5a7025825d9fd389c89b49bf571f9abaea8a062dc4048320b5b43bf46",
        "urls": [
          "bzz-raw://c066485a7d4bd18d44efb4c89274b0959e8066b9a480383a2ce07d7f31555f88",
          "dweb:/ipfs/QmckeYfA5FtAjcxaytq69Dpj6uY57tbQ61kNPPxXi9kgbW"
        ],
        "license": "MIT"
      },
      "util/lib/forge-std/src/interfaces/IMulticall3.sol": {
        "keccak256": "0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a",
        "urls": [
          "bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0",
          "dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "test/Q4/QuestionNativeToken.t.sol",
    "id": 2119,
    "exportedSymbols": {
      "AnswerNativeToken": [
        340
      ],
      "DSTest": [
        5160
      ],
      "IQuestionNativeToken": [
        2132
      ],
      "QuestionNativeToken": [
        2118
      ],
      "StdAssertions": [
        6634
      ],
      "StdChains": [
        7328
      ],
      "StdCheats": [
        9579
      ],
      "StdInvariant": [
        9869
      ],
      "StdStorage": [
        10619
      ],
      "StdStyle": [
        13263
      ],
      "StdUtils": [
        14070
      ],
      "Test": [
        14119
      ],
      "TestBase": [
        5220
      ],
      "Vm": [
        15439
      ],
      "console": [
        23503
      ],
      "console2": [
        31599
      ],
      "stdError": [
        9645
      ],
      "stdJson": [
        10445
      ],
      "stdMath": [
        10587
      ],
      "stdStorage": [
        12052
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:1585:25",
    "nodes": [
      {
        "id": 1898,
        "nodeType": "PragmaDirective",
        "src": "32:24:25",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".17"
        ]
      },
      {
        "id": 1899,
        "nodeType": "ImportDirective",
        "src": "58:28:25",
        "nodes": [],
        "absolutePath": "util/lib/forge-std/src/Test.sol",
        "file": "forge-std/Test.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2119,
        "sourceUnit": 14120,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1901,
        "nodeType": "ImportDirective",
        "src": "87:75:25",
        "nodes": [],
        "absolutePath": "contracts/src/A4/AnswerNativeToken.sol",
        "file": "contracts/src/A4/AnswerNativeToken.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2119,
        "sourceUnit": 341,
        "symbolAliases": [
          {
            "foreign": {
              "id": 1900,
              "name": "AnswerNativeToken",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 340,
              "src": "96:17:25",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 1903,
        "nodeType": "ImportDirective",
        "src": "163:77:25",
        "nodes": [],
        "absolutePath": "test/Q4/interfaces/IQuestionNativeToken.sol",
        "file": "./interfaces/IQuestionNativeToken.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2119,
        "sourceUnit": 2133,
        "symbolAliases": [
          {
            "foreign": {
              "id": 1902,
              "name": "IQuestionNativeToken",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 2132,
              "src": "172:20:25",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 2118,
        "nodeType": "ContractDefinition",
        "src": "242:1374:25",
        "nodes": [
          {
            "id": 1911,
            "nodeType": "UsingForDirective",
            "src": "307:32:25",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 1908,
              "name": "stdStorage",
              "nameLocations": [
                "313:10:25"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 12052,
              "src": "313:10:25"
            },
            "typeName": {
              "id": 1910,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1909,
                "name": "StdStorage",
                "nameLocations": [
                  "328:10:25"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 10619,
                "src": "328:10:25"
              },
              "referencedDeclaration": 10619,
              "src": "328:10:25",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_StdStorage_$10619_storage_ptr",
                "typeString": "struct StdStorage"
              }
            }
          },
          {
            "id": 1914,
            "nodeType": "VariableDeclaration",
            "src": "345:30:25",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "yourContract",
            "nameLocation": "363:12:25",
            "scope": 2118,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
              "typeString": "contract AnswerNativeToken"
            },
            "typeName": {
              "id": 1913,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1912,
                "name": "AnswerNativeToken",
                "nameLocations": [
                  "345:17:25"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 340,
                "src": "345:17:25"
              },
              "referencedDeclaration": 340,
              "src": "345:17:25",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
                "typeString": "contract AnswerNativeToken"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 1916,
            "nodeType": "VariableDeclaration",
            "src": "381:27:25",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "yourContractAddress",
            "nameLocation": "389:19:25",
            "scope": 2118,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1915,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "381:7:25",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 1934,
            "nodeType": "FunctionDefinition",
            "src": "415:132:25",
            "nodes": [],
            "body": {
              "id": 1933,
              "nodeType": "Block",
              "src": "439:108:25",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 1924,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1919,
                      "name": "yourContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1914,
                      "src": "449:12:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
                        "typeString": "contract AnswerNativeToken"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1922,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "464:21:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_AnswerNativeToken_$340_$",
                          "typeString": "function () returns (contract AnswerNativeToken)"
                        },
                        "typeName": {
                          "id": 1921,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1920,
                            "name": "AnswerNativeToken",
                            "nameLocations": [
                              "468:17:25"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 340,
                            "src": "468:17:25"
                          },
                          "referencedDeclaration": 340,
                          "src": "468:17:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
                            "typeString": "contract AnswerNativeToken"
                          }
                        }
                      },
                      "id": 1923,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "464:23:25",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
                        "typeString": "contract AnswerNativeToken"
                      }
                    },
                    "src": "449:38:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
                      "typeString": "contract AnswerNativeToken"
                    }
                  },
                  "id": 1925,
                  "nodeType": "ExpressionStatement",
                  "src": "449:38:25"
                },
                {
                  "expression": {
                    "id": 1931,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1926,
                      "name": "yourContractAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1916,
                      "src": "497:19:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1929,
                          "name": "yourContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1914,
                          "src": "527:12:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
                            "typeString": "contract AnswerNativeToken"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
                            "typeString": "contract AnswerNativeToken"
                          }
                        ],
                        "id": 1928,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "519:7:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 1927,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "519:7:25",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 1930,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "519:21:25",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "497:43:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1932,
                  "nodeType": "ExpressionStatement",
                  "src": "497:43:25"
                }
              ]
            },
            "functionSelector": "0a9254e4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setUp",
            "nameLocation": "424:5:25",
            "parameters": {
              "id": 1917,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "429:2:25"
            },
            "returnParameters": {
              "id": 1918,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "439:0:25"
            },
            "scope": 2118,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 2117,
            "nodeType": "FunctionDefinition",
            "src": "628:986:25",
            "nodes": [],
            "body": {
              "id": 2116,
              "nodeType": "Block",
              "src": "666:948:25",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    1940
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1940,
                      "mutability": "mutable",
                      "name": "vars",
                      "nameLocation": "692:4:25",
                      "nodeType": "VariableDeclaration",
                      "scope": 2116,
                      "src": "676:20:25",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                        "typeString": "struct IQuestionNativeToken.TestVars"
                      },
                      "typeName": {
                        "id": 1939,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1938,
                          "name": "TestVars",
                          "nameLocations": [
                            "676:8:25"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 2131,
                          "src": "676:8:25"
                        },
                        "referencedDeclaration": 2131,
                        "src": "676:8:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TestVars_$2131_storage_ptr",
                          "typeString": "struct IQuestionNativeToken.TestVars"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1941,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "676:20:25"
                },
                {
                  "expression": {
                    "id": 1950,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "expression": {
                          "id": 1942,
                          "name": "vars",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1940,
                          "src": "707:4:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                            "typeString": "struct IQuestionNativeToken.TestVars memory"
                          }
                        },
                        "id": 1945,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "712:5:25",
                        "memberName": "alice",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2125,
                        "src": "707:10:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                          "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                        }
                      },
                      "id": 1946,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "718:4:25",
                      "memberName": "addr",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 364,
                      "src": "707:15:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "416c696365",
                          "id": 1948,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "734:7:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a",
                            "typeString": "literal_string \"Alice\""
                          },
                          "value": "Alice"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a",
                            "typeString": "literal_string \"Alice\""
                          }
                        ],
                        "id": 1947,
                        "name": "makeAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8746,
                        "src": "725:8:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$",
                          "typeString": "function (string memory) returns (address)"
                        }
                      },
                      "id": 1949,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "725:17:25",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "707:35:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1951,
                  "nodeType": "ExpressionStatement",
                  "src": "707:35:25"
                },
                {
                  "expression": {
                    "id": 1958,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "expression": {
                          "id": 1952,
                          "name": "vars",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1940,
                          "src": "752:4:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                            "typeString": "struct IQuestionNativeToken.TestVars memory"
                          }
                        },
                        "id": 1955,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "757:5:25",
                        "memberName": "alice",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2125,
                        "src": "752:10:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                          "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                        }
                      },
                      "id": 1956,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "763:5:25",
                      "memberName": "score",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 366,
                      "src": "752:16:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "313030",
                      "id": 1957,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "771:3:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_100_by_1",
                        "typeString": "int_const 100"
                      },
                      "value": "100"
                    },
                    "src": "752:22:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1959,
                  "nodeType": "ExpressionStatement",
                  "src": "752:22:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "expression": {
                            "id": 1963,
                            "name": "vars",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1940,
                            "src": "792:4:25",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                              "typeString": "struct IQuestionNativeToken.TestVars memory"
                            }
                          },
                          "id": 1964,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "797:5:25",
                          "memberName": "alice",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2125,
                          "src": "792:10:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                            "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                          }
                        },
                        "id": 1965,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "803:4:25",
                        "memberName": "addr",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 364,
                        "src": "792:15:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "31",
                        "id": 1966,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "809:7:25",
                        "subdenomination": "ether",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        },
                        "value": "1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        }
                      ],
                      "expression": {
                        "id": 1960,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5213,
                        "src": "784:2:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$15439",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 1962,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "787:4:25",
                      "memberName": "deal",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 15161,
                      "src": "784:7:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256) external"
                      }
                    },
                    "id": 1967,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "784:33:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1968,
                  "nodeType": "ExpressionStatement",
                  "src": "784:33:25"
                },
                {
                  "expression": {
                    "id": 1977,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "expression": {
                          "id": 1969,
                          "name": "vars",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1940,
                          "src": "827:4:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                            "typeString": "struct IQuestionNativeToken.TestVars memory"
                          }
                        },
                        "id": 1972,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "832:3:25",
                        "memberName": "bob",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2128,
                        "src": "827:8:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                          "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                        }
                      },
                      "id": 1973,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "836:4:25",
                      "memberName": "addr",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 364,
                      "src": "827:13:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "426f62",
                          "id": 1975,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "852:5:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b6",
                            "typeString": "literal_string \"Bob\""
                          },
                          "value": "Bob"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b6",
                            "typeString": "literal_string \"Bob\""
                          }
                        ],
                        "id": 1974,
                        "name": "makeAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8746,
                        "src": "843:8:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$",
                          "typeString": "function (string memory) returns (address)"
                        }
                      },
                      "id": 1976,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "843:15:25",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "827:31:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1978,
                  "nodeType": "ExpressionStatement",
                  "src": "827:31:25"
                },
                {
                  "expression": {
                    "id": 1985,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "expression": {
                          "id": 1979,
                          "name": "vars",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1940,
                          "src": "868:4:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                            "typeString": "struct IQuestionNativeToken.TestVars memory"
                          }
                        },
                        "id": 1982,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "873:3:25",
                        "memberName": "bob",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2128,
                        "src": "868:8:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                          "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                        }
                      },
                      "id": 1983,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "877:5:25",
                      "memberName": "score",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 366,
                      "src": "868:14:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "3630",
                      "id": 1984,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "885:2:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_60_by_1",
                        "typeString": "int_const 60"
                      },
                      "value": "60"
                    },
                    "src": "868:19:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1986,
                  "nodeType": "ExpressionStatement",
                  "src": "868:19:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "expression": {
                            "id": 1990,
                            "name": "vars",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1940,
                            "src": "905:4:25",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                              "typeString": "struct IQuestionNativeToken.TestVars memory"
                            }
                          },
                          "id": 1991,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "910:3:25",
                          "memberName": "bob",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2128,
                          "src": "905:8:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                            "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                          }
                        },
                        "id": 1992,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "914:4:25",
                        "memberName": "addr",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 364,
                        "src": "905:13:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "32",
                        "id": 1993,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "920:7:25",
                        "subdenomination": "ether",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2000000000000000000_by_1",
                          "typeString": "int_const 2000000000000000000"
                        },
                        "value": "2"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_2000000000000000000_by_1",
                          "typeString": "int_const 2000000000000000000"
                        }
                      ],
                      "expression": {
                        "id": 1987,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5213,
                        "src": "897:2:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$15439",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 1989,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "900:4:25",
                      "memberName": "deal",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 15161,
                      "src": "897:7:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256) external"
                      }
                    },
                    "id": 1994,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "897:31:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1995,
                  "nodeType": "ExpressionStatement",
                  "src": "897:31:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "expression": {
                            "id": 1999,
                            "name": "vars",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1940,
                            "src": "948:4:25",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                              "typeString": "struct IQuestionNativeToken.TestVars memory"
                            }
                          },
                          "id": 2000,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "953:5:25",
                          "memberName": "alice",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2125,
                          "src": "948:10:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                            "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                          }
                        },
                        "id": 2001,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "959:4:25",
                        "memberName": "addr",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 364,
                        "src": "948:15:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1996,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5213,
                        "src": "939:2:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$15439",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 1998,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "942:5:25",
                      "memberName": "prank",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 15132,
                      "src": "939:8:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 2002,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "939:25:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2003,
                  "nodeType": "ExpressionStatement",
                  "src": "939:25:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2007,
                          "name": "vars",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1940,
                          "src": "1000:4:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                            "typeString": "struct IQuestionNativeToken.TestVars memory"
                          }
                        },
                        "id": 2008,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1005:5:25",
                        "memberName": "alice",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2125,
                        "src": "1000:10:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                          "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                          "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                        }
                      ],
                      "expression": {
                        "id": 2004,
                        "name": "yourContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1914,
                        "src": "974:12:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
                          "typeString": "contract AnswerNativeToken"
                        }
                      },
                      "id": 2006,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "987:12:25",
                      "memberName": "gimmeLicense",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 323,
                      "src": "974:25:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_struct$_LicenseCandidate_$367_memory_ptr_$returns$__$",
                        "typeString": "function (struct SAnswerNativeToken.LicenseCandidate memory) payable external"
                      }
                    },
                    "id": 2009,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "974:37:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2010,
                  "nodeType": "ExpressionStatement",
                  "src": "974:37:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "expression": {
                            "id": 2014,
                            "name": "vars",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1940,
                            "src": "1031:4:25",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                              "typeString": "struct IQuestionNativeToken.TestVars memory"
                            }
                          },
                          "id": 2015,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1036:3:25",
                          "memberName": "bob",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2128,
                          "src": "1031:8:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                            "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                          }
                        },
                        "id": 2016,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1040:4:25",
                        "memberName": "addr",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 364,
                        "src": "1031:13:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 2011,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5213,
                        "src": "1022:2:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$15439",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 2013,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1025:5:25",
                      "memberName": "prank",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 15132,
                      "src": "1022:8:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 2017,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1022:23:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2018,
                  "nodeType": "ExpressionStatement",
                  "src": "1022:23:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "596f75206661696c65642e",
                        "id": 2022,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1071:13:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_934e30aef61b9330bcc740012093bdee28a4472cf915607a97f6ce6364b8ab0e",
                          "typeString": "literal_string \"You failed.\""
                        },
                        "value": "You failed."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_934e30aef61b9330bcc740012093bdee28a4472cf915607a97f6ce6364b8ab0e",
                          "typeString": "literal_string \"You failed.\""
                        }
                      ],
                      "expression": {
                        "id": 2019,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5213,
                        "src": "1055:2:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$15439",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 2021,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1058:12:25",
                      "memberName": "expectRevert",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 15173,
                      "src": "1055:15:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (bytes memory) external"
                      }
                    },
                    "id": 2023,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1055:30:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2024,
                  "nodeType": "ExpressionStatement",
                  "src": "1055:30:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2028,
                          "name": "vars",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1940,
                          "src": "1121:4:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                            "typeString": "struct IQuestionNativeToken.TestVars memory"
                          }
                        },
                        "id": 2029,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1126:3:25",
                        "memberName": "bob",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2128,
                        "src": "1121:8:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                          "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                          "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                        }
                      ],
                      "expression": {
                        "id": 2025,
                        "name": "yourContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1914,
                        "src": "1095:12:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
                          "typeString": "contract AnswerNativeToken"
                        }
                      },
                      "id": 2027,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1108:12:25",
                      "memberName": "gimmeLicense",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 323,
                      "src": "1095:25:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_struct$_LicenseCandidate_$367_memory_ptr_$returns$__$",
                        "typeString": "function (struct SAnswerNativeToken.LicenseCandidate memory) payable external"
                      }
                    },
                    "id": 2030,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1095:35:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2031,
                  "nodeType": "ExpressionStatement",
                  "src": "1095:35:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "expression": {
                            "id": 2035,
                            "name": "vars",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1940,
                            "src": "1150:4:25",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                              "typeString": "struct IQuestionNativeToken.TestVars memory"
                            }
                          },
                          "id": 2036,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1155:3:25",
                          "memberName": "bob",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2128,
                          "src": "1150:8:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                            "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                          }
                        },
                        "id": 2037,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1159:4:25",
                        "memberName": "addr",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 364,
                        "src": "1150:13:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 2032,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5213,
                        "src": "1141:2:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$15439",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 2034,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1144:5:25",
                      "memberName": "prank",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 15132,
                      "src": "1141:8:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 2038,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1141:23:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2039,
                  "nodeType": "ExpressionStatement",
                  "src": "1141:23:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "596f75206661696c65642e",
                        "id": 2043,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1190:13:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_934e30aef61b9330bcc740012093bdee28a4472cf915607a97f6ce6364b8ab0e",
                          "typeString": "literal_string \"You failed.\""
                        },
                        "value": "You failed."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_934e30aef61b9330bcc740012093bdee28a4472cf915607a97f6ce6364b8ab0e",
                          "typeString": "literal_string \"You failed.\""
                        }
                      ],
                      "expression": {
                        "id": 2040,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5213,
                        "src": "1174:2:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$15439",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 2042,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1177:12:25",
                      "memberName": "expectRevert",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 15173,
                      "src": "1174:15:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (bytes memory) external"
                      }
                    },
                    "id": 2044,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1174:30:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2045,
                  "nodeType": "ExpressionStatement",
                  "src": "1174:30:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2051,
                          "name": "vars",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1940,
                          "src": "1253:4:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                            "typeString": "struct IQuestionNativeToken.TestVars memory"
                          }
                        },
                        "id": 2052,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1258:3:25",
                        "memberName": "bob",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2128,
                        "src": "1253:8:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                          "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                          "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                            "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                          }
                        ],
                        "expression": {
                          "id": 2046,
                          "name": "yourContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1914,
                          "src": "1214:12:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
                            "typeString": "contract AnswerNativeToken"
                          }
                        },
                        "id": 2048,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1227:12:25",
                        "memberName": "gimmeLicense",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 323,
                        "src": "1214:25:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_payable$_t_struct$_LicenseCandidate_$367_memory_ptr_$returns$__$",
                          "typeString": "function (struct SAnswerNativeToken.LicenseCandidate memory) payable external"
                        }
                      },
                      "id": 2050,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "hexValue": "31653137",
                          "id": 2049,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1247:4:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_100000000000000000_by_1",
                            "typeString": "int_const 100000000000000000"
                          },
                          "value": "1e17"
                        }
                      ],
                      "src": "1214:38:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_struct$_LicenseCandidate_$367_memory_ptr_$returns$__$value",
                        "typeString": "function (struct SAnswerNativeToken.LicenseCandidate memory) payable external"
                      }
                    },
                    "id": 2053,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1214:48:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2054,
                  "nodeType": "ExpressionStatement",
                  "src": "1214:48:25"
                },
                {
                  "expression": {
                    "id": 2065,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "components": [
                        null,
                        {
                          "expression": {
                            "id": 2055,
                            "name": "vars",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1940,
                            "src": "1276:4:25",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                              "typeString": "struct IQuestionNativeToken.TestVars memory"
                            }
                          },
                          "id": 2057,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "1281:5:25",
                          "memberName": "score",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2130,
                          "src": "1276:10:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 2058,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "TupleExpression",
                      "src": "1273:14:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$_t_uint256_$",
                        "typeString": "tuple(,uint256)"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "expression": {
                              "id": 2061,
                              "name": "vars",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1940,
                              "src": "1318:4:25",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                                "typeString": "struct IQuestionNativeToken.TestVars memory"
                              }
                            },
                            "id": 2062,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1323:3:25",
                            "memberName": "bob",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2128,
                            "src": "1318:8:25",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                              "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                            }
                          },
                          "id": 2063,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1327:4:25",
                          "memberName": "addr",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 364,
                          "src": "1318:13:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "id": 2059,
                          "name": "yourContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1914,
                          "src": "1290:12:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
                            "typeString": "contract AnswerNativeToken"
                          }
                        },
                        "id": 2060,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1303:14:25",
                        "memberName": "licenseHolders",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 291,
                        "src": "1290:27:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_address_$_t_uint256_$",
                          "typeString": "function (address) view external returns (address,uint256)"
                        }
                      },
                      "id": 2064,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1290:42:25",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
                        "typeString": "tuple(address,uint256)"
                      }
                    },
                    "src": "1273:59:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2066,
                  "nodeType": "ExpressionStatement",
                  "src": "1273:59:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2068,
                          "name": "vars",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1940,
                          "src": "1351:4:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                            "typeString": "struct IQuestionNativeToken.TestVars memory"
                          }
                        },
                        "id": 2069,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1356:5:25",
                        "memberName": "score",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2130,
                        "src": "1351:10:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 2070,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1363:1:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        }
                      ],
                      "id": 2067,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5351,
                        5376,
                        5389,
                        5405,
                        5447,
                        5489,
                        5531,
                        5568,
                        5605,
                        5642,
                        3694,
                        3719,
                        3749,
                        3774,
                        3833,
                        3858,
                        3888,
                        3913,
                        5013,
                        5048
                      ],
                      "referencedDeclaration": 3888,
                      "src": "1342:8:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 2071,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1342:23:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2072,
                  "nodeType": "ExpressionStatement",
                  "src": "1342:23:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "expression": {
                            "id": 2076,
                            "name": "vars",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1940,
                            "src": "1385:4:25",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                              "typeString": "struct IQuestionNativeToken.TestVars memory"
                            }
                          },
                          "id": 2077,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1390:3:25",
                          "memberName": "bob",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2128,
                          "src": "1385:8:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                            "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                          }
                        },
                        "id": 2078,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1394:4:25",
                        "memberName": "addr",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 364,
                        "src": "1385:13:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 2073,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5213,
                        "src": "1376:2:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$15439",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 2075,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1379:5:25",
                      "memberName": "prank",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 15132,
                      "src": "1376:8:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 2079,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1376:23:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2080,
                  "nodeType": "ExpressionStatement",
                  "src": "1376:23:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2086,
                          "name": "vars",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1940,
                          "src": "1451:4:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                            "typeString": "struct IQuestionNativeToken.TestVars memory"
                          }
                        },
                        "id": 2087,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1456:3:25",
                        "memberName": "bob",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2128,
                        "src": "1451:8:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                          "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                          "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                            "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                          }
                        ],
                        "expression": {
                          "id": 2081,
                          "name": "yourContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1914,
                          "src": "1409:12:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
                            "typeString": "contract AnswerNativeToken"
                          }
                        },
                        "id": 2083,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1422:12:25",
                        "memberName": "gimmeLicense",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 323,
                        "src": "1409:25:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_payable$_t_struct$_LicenseCandidate_$367_memory_ptr_$returns$__$",
                          "typeString": "function (struct SAnswerNativeToken.LicenseCandidate memory) payable external"
                        }
                      },
                      "id": 2085,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "hexValue": "31",
                          "id": 2084,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1442:7:25",
                          "subdenomination": "ether",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          },
                          "value": "1"
                        }
                      ],
                      "src": "1409:41:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_struct$_LicenseCandidate_$367_memory_ptr_$returns$__$value",
                        "typeString": "function (struct SAnswerNativeToken.LicenseCandidate memory) payable external"
                      }
                    },
                    "id": 2088,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1409:51:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2089,
                  "nodeType": "ExpressionStatement",
                  "src": "1409:51:25"
                },
                {
                  "expression": {
                    "id": 2100,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "components": [
                        null,
                        {
                          "expression": {
                            "id": 2090,
                            "name": "vars",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1940,
                            "src": "1474:4:25",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                              "typeString": "struct IQuestionNativeToken.TestVars memory"
                            }
                          },
                          "id": 2092,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "1479:5:25",
                          "memberName": "score",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2130,
                          "src": "1474:10:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 2093,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "TupleExpression",
                      "src": "1471:14:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$_t_uint256_$",
                        "typeString": "tuple(,uint256)"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "expression": {
                              "id": 2096,
                              "name": "vars",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1940,
                              "src": "1516:4:25",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                                "typeString": "struct IQuestionNativeToken.TestVars memory"
                              }
                            },
                            "id": 2097,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1521:3:25",
                            "memberName": "bob",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2128,
                            "src": "1516:8:25",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                              "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                            }
                          },
                          "id": 2098,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1525:4:25",
                          "memberName": "addr",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 364,
                          "src": "1516:13:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "id": 2094,
                          "name": "yourContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1914,
                          "src": "1488:12:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_AnswerNativeToken_$340",
                            "typeString": "contract AnswerNativeToken"
                          }
                        },
                        "id": 2095,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1501:14:25",
                        "memberName": "licenseHolders",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 291,
                        "src": "1488:27:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_address_$_t_uint256_$",
                          "typeString": "function (address) view external returns (address,uint256)"
                        }
                      },
                      "id": 2099,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1488:42:25",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
                        "typeString": "tuple(address,uint256)"
                      }
                    },
                    "src": "1471:59:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2101,
                  "nodeType": "ExpressionStatement",
                  "src": "1471:59:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2103,
                          "name": "vars",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1940,
                          "src": "1549:4:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                            "typeString": "struct IQuestionNativeToken.TestVars memory"
                          }
                        },
                        "id": 2104,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1554:5:25",
                        "memberName": "score",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2130,
                        "src": "1549:10:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "expression": {
                            "id": 2105,
                            "name": "vars",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1940,
                            "src": "1561:4:25",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TestVars_$2131_memory_ptr",
                              "typeString": "struct IQuestionNativeToken.TestVars memory"
                            }
                          },
                          "id": 2106,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1566:3:25",
                          "memberName": "bob",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2128,
                          "src": "1561:8:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_LicenseCandidate_$367_memory_ptr",
                            "typeString": "struct SAnswerNativeToken.LicenseCandidate memory"
                          }
                        },
                        "id": 2107,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1570:5:25",
                        "memberName": "score",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 366,
                        "src": "1561:14:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2102,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5351,
                        5376,
                        5389,
                        5405,
                        5447,
                        5489,
                        5531,
                        5568,
                        5605,
                        5642,
                        3694,
                        3719,
                        3749,
                        3774,
                        3833,
                        3858,
                        3888,
                        3913,
                        5013,
                        5048
                      ],
                      "referencedDeclaration": 3888,
                      "src": "1540:8:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 2108,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1540:36:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2109,
                  "nodeType": "ExpressionStatement",
                  "src": "1540:36:25"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "4b495441594f",
                        "id": 2113,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1598:8:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c2786a03cc2601b47ad38bfbd738635a79c26c805f6cdf03a0aea02b49152a9",
                          "typeString": "literal_string \"KITAYO\""
                        },
                        "value": "KITAYO"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_3c2786a03cc2601b47ad38bfbd738635a79c26c805f6cdf03a0aea02b49152a9",
                          "typeString": "literal_string \"KITAYO\""
                        }
                      ],
                      "expression": {
                        "id": 2110,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23503,
                        "src": "1586:7:25",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$23503_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 2112,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1594:3:25",
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 16034,
                      "src": "1586:11:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) view"
                      }
                    },
                    "id": 2114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1586:21:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2115,
                  "nodeType": "ExpressionStatement",
                  "src": "1586:21:25"
                }
              ]
            },
            "documentation": {
              "id": 1935,
              "nodeType": "StructuredDocumentation",
              "src": "553:70:25",
              "text": "Q-4. ネイティブトークン支払いを試す"
            },
            "functionSelector": "29c26fff",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_Q4_NativeToken",
            "nameLocation": "637:19:25",
            "parameters": {
              "id": 1936,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "656:2:25"
            },
            "returnParameters": {
              "id": 1937,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "666:0:25"
            },
            "scope": 2118,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1904,
              "name": "Test",
              "nameLocations": [
                "274:4:25"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 14119,
              "src": "274:4:25"
            },
            "id": 1905,
            "nodeType": "InheritanceSpecifier",
            "src": "274:4:25"
          },
          {
            "baseName": {
              "id": 1906,
              "name": "IQuestionNativeToken",
              "nameLocations": [
                "280:20:25"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2132,
              "src": "280:20:25"
            },
            "id": 1907,
            "nodeType": "InheritanceSpecifier",
            "src": "280:20:25"
          }
        ],
        "canonicalName": "QuestionNativeToken",
        "contractDependencies": [
          340
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          2118,
          2132,
          14119,
          5220,
          5217,
          14070,
          9869,
          9579,
          8900,
          7328,
          6634,
          5160
        ],
        "name": "QuestionNativeToken",
        "nameLocation": "251:19:25",
        "scope": 2119,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 25
}